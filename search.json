[{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fmicompbio.github.io/monaLisa/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"monaLisa - MOtif aNAlysis with Lisa","text":"monaLisa collection functions working biological sequences motifs represent binding preferences transcription factors nucleic acid binding proteins. example, monaLisa can used conveniently find motif hits sequences (see section @ref(findhits)), identify motifs likely associated observed experimental data. analyses supposed provide potential answers question “transcription factors drivers observed changes expression/methylation/accessibility?”. Several approaches described also address problem, among REDUCE (Roven Bussemaker 2003), AME (McLeay Bailey 2010) ISMARA (Balwierz et al. 2014). monaLisa, aim provide flexible implementation integrates well Bioconductor resources, makes use sequence composition correction developed Homer (Heinz et al. 2010) stability selection (Meinshausen Bühlmann 2010) provides several alternative ways study relationship experimental measurements sequence motifs. can use known motifs collections transcription factor binding specificities JASPAR2020, also available Bioconductor. Genomic regions example promoters, enhancers accessible regions experimental data available. Two independent approaches implemented identify interesting motifs: binned motif enrichment analysis (calcBinnedMotifEnrR, see section @ref(binned)), genomic regions grouped bins according numerical value assigned region, change expression, accessibility methylation. Motif enrichments calculated bin, normalizing differences sequence composition similar way originally done Homer (Heinz et al. 2010). special case, approach can also used simple two set comparison (foreground background sequences, see section @ref(binary)) determine motif enrichments single set sequences compared suitably matched genomic background set (see section @ref(vsgenome)). binned motif enrichment approach first introduced Ginno et al. (2018) subsequently applied e.g. Barisic et al. (2019). see details calcBinnedMotifEnrR resembles Homer, check function help page. recommend using function binned motif enrichment analysis, since corrects sequence composition differences similarly Homer, implemented efficiently. calcBinnedMotifEnrHomer implements analysis using Homer therefore requires local installation Homer, calcBinnedKmerEnr(see section @ref(binnedkmers)) implements analysis k-mers instead motifs, study sequence enrichments without requirement known motifs. Randomized Lasso stability selection (randLassoStabSel, see stability selection vignette monaLisa) uses robust regression approach (stability selection, Meinshausen Bühlmann (2010)) predict transcription factors can explain experimental measurements, example changes chromatin accessibility two conditions. Also approach allows correct sequence composition. addition, similar motifs “compete” selected. approaches, functions allow visualization obtained results provided. prefer jump right , can continue section @ref(quick) shows quick hypothetical example run binned motif enrichment analysis. prefer actually compute enrichments real data, can find detailed example binned motif enrichment analysis (section @ref(binned)). special cases analyzing just two sets sequences (binary motif enrichment analysis) single set sequences (comparing suitable background sampled genome) illustrated section @ref(nobins).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"monaLisa - MOtif aNAlysis with Lisa","text":"monaLisa can installed Bioconductor via BiocManager package:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"monaLisa\")"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"quick","dir":"Articles","previous_headings":"","what":"Quick example: Identify enriched motifs in bins","title":"monaLisa - MOtif aNAlysis with Lisa","text":"quick example , run, illustrates binned motif enrichment analysis can performed monaLisa. assume already set peaks. sequences peak regions stored Biostrings::DNAStringSet object (peak_seqs), additionally peak associated numeric value (e.g., change methylation two conditions, stored peak_change vector), used bin regions finding motifs enriched bin. returned se SummarizedExperiment assays negLog10P, negLog10Padj, pearsonResid, expForegroundWgt, log2enr, sumForegroundWgtWithHits sumBackgroundWgtWithHits, containing matrix motifs (rows) bins (columns). values : negLog10P: raw P value (−log10p-\\log_{10} p) given motif enrichment given bin. P value results enrichment calculation comparing occurrences motif bin occurrences background sequences, defined background argument (default: sequences bins). negLog10Padj: negLog10P adjusted multiple testing using method provided p.adjust.method argument, default: Benjamini Hochberg, 1995 (p.adjust(..., method=\"fdr\")). pearsonResid: Standardized Pearson residuals, measure motif enrichment akin z-score number regions bin containing motif. standardized Pearson residuals given resid=(o−μ)/σresid = (o - \\mu)/\\sigma, μ\\mu expected count σ\\sigma standard deviation expression numerator, null hypothesis probability containing motif independent whether sequence foreground background (see e.g. Agresti (2007), section @ref(runBinned)). expForegroundWgtWithHits: expected number regions bin containing given motif. log2enr: Motif enrichments, calculated : log2enr=log2((o+c)/(e+c))log2enr = log2((o + c)/(e + c)), oo ee observed expected numbers regions bin containing given motif, respectively, cc pseudocount defined pseudocount.log2enr argument. sumForegroundWgtWithHits sumBackgroundWgtWithHits sum foreground background sequences least one occurrence motif, respectively. background sequences weighted order adjust differences sequence composition foreground background. addition, rowData(se) colData(se) give information used motifs bins, respectively. metadata(se) can find information parameter values.","code":"# load package library(monaLisa)  # bin regions # - peak_change is a numerical vector # - peak_change needs to be created by the user to run this code peak_bins <- bin(x = peak_change, binmode = \"equalN\", nElement = 400)  # calculate motif enrichments # - peak_seqs is a DNAStringSet, pwms is a PWMatrixList # - peak_seqs and pwms need to be created by the user to run this code se <- calcBinnedMotifEnrR(seqs = peak_seqs,                           bins = peak_bins,                           pwmL = pwms)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"binned","dir":"Articles","previous_headings":"","what":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","title":"monaLisa - MOtif aNAlysis with Lisa","text":"section illustrates use monaLisa analyze regions sequences associated numerical values (: changes DNA methylation), grouped several bins according values. special cases just two sets sequences (binary motif enrichment analysis) single set sequences (comparing suitable background sampled genome) illustrated section @ref(nobins). example based experimental data vitro differentiation system, mouse embryonic stem (ES) cells differentiated neuronal progenitors (NP). earlier study (Stadler et al. 2011), analyzed genome-wide CpG methylation patterns cell types identified called low methylated regions (LMRs), reduced methylation levels correspond regions bound transcription factors. also developed tool systematically identifies regions genome-wide methylation data (Burger et al. 2013). Interestingly, change methylation LMRs indicative altered transcription factor binding. therefore use regions identify transcription factor motifs enriched depleted LMRs change methylation ES NP cell states.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"load-packages","dir":"Articles","previous_headings":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","what":"Load packages","title":"monaLisa - MOtif aNAlysis with Lisa","text":"start loading needed packages:","code":"library(GenomicRanges) library(SummarizedExperiment) library(JASPAR2020) library(TFBSTools) library(BSgenome.Mmusculus.UCSC.mm10) library(monaLisa) library(ComplexHeatmap) library(circlize)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"genomic-regions-or-sequences-of-interest","dir":"Articles","previous_headings":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","what":"Genomic regions or sequences of interest","title":"monaLisa - MOtif aNAlysis with Lisa","text":"monaLisa provides file genomic coordinates (mouse mm10 assembly) LMRs, respective changes methylation. load GRanges object R. Alternatively, user may also start analysis genomic regions contained bed file, directly sequences FASTA file. following example code illustrates , run following examples vignette. can see 45414 LMRs, gain methylation ES NP stages:  order keep computation time reasonable, ’ll select 10,000 LMRs randomly:","code":"lmrfile <- system.file(\"extdata\", \"LMRsESNPmerged.gr.rds\",                         package = \"monaLisa\") lmr <- readRDS(lmrfile) lmr #> GRanges object with 45414 ranges and 1 metadata column: #>           seqnames          ranges strand |    deltaMeth #>              <Rle>       <IRanges>  <Rle> |    <numeric> #>       [1]     chr1 3549153-3550201      * |    0.3190299 #>       [2]     chr1 3680914-3682164      * |    0.0657352 #>       [3]     chr1 3913315-3914523      * |    0.4803313 #>       [4]     chr1 3953500-3954157      * |    0.4504727 #>       [5]     chr1 4150457-4151567      * |    0.5014768 #>       ...      ...             ...    ... .          ... #>   [45410]     chrY 4196254-4196510      * | -0.020020382 #>   [45411]     chrY 4193654-4194152      * | -0.102559935 #>   [45412]     chrY 4190208-4192766      * | -0.031668206 #>   [45413]     chrY 4188072-4188924      * |  0.130623049 #>   [45414]     chrY 4181867-4182624      * |  0.000494588 #>   ------- #>   seqinfo: 21 sequences from an unspecified genome # starting from a bed file #   import as `GRanges` using `rtracklayer::import` #   remark: if the bed file also contains scores (5th column), these will be #           also be imported and available in the \"score\" metadata column, #           in this example in `lmr$score` lmr <- rtracklayer::import(con = \"file.bed\", format = \"bed\")  # starting from sequences in a FASTA file #   import as `DNAStringSet` using `Biostrings::readDNAStringSet` #   remark: contrary to the coordinates in a `GRanges` object like `lmr` above, #           the sequences in `lmrseqs` can be directly used as input to #           monaLisa::calcBinnedMotifEnrR (no need to extract sequences from #           the genome, just skip that step below) lmrseqs <- Biostrings::readDNAStringSet(filepath = \"myfile.fa\", format = \"fasta\") hist(lmr$deltaMeth, 100, col = \"gray\", main = \"\",      xlab = \"Change of methylation (NP - ES)\", ylab = \"Number of LMRs\") set.seed(1) lmrsel <- lmr[ sample(x = length(lmr), size = 10000, replace = FALSE) ]"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"bin-genomic-regions","dir":"Articles","previous_headings":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","what":"Bin genomic regions","title":"monaLisa - MOtif aNAlysis with Lisa","text":"Now let’s bin LMRs much change methylation, using bin function monaLisa. interested small changes methylation, say less 0.3, ’ll use minAbsX argument create -change bin [-0.3, 0.3). remaining LMRs put bins 800 : Generally speaking, recommend minimum ~100 sequences per bin fewer sequences may lead small motif counts thus either small unstable enrichments. can see bin set zero bin using getZeroBin, set different bin using setZeroBin: asymmetry methylation changes, single bin LMRs lost methylation many gained:  Note bin breaks around -change bin exactly -0.3 0.3. adjusted required 800 LMRs per bin . monaLisa give warning adjusted bin breaks strongly deviating requested minAbsX value, bin(..., model = \"breaks\") can used cases exactly defined bin boundaries required.","code":"bins <- bin(x = lmrsel$deltaMeth, binmode = \"equalN\", nElement = 800,              minAbsX = 0.3) table(bins) #> bins #> [-0.935,-0.242]  (-0.242,0.327]   (0.327,0.388]   (0.388,0.443]   (0.443,0.491]  #>             800            4400             800             800             800  #>   (0.491,0.536]   (0.536,0.585]   (0.585,0.862]  #>             800             800             800 # find the index of the level representing the zero bin  levels(bins) #> [1] \"[-0.935,-0.242]\" \"(-0.242,0.327]\"  \"(0.327,0.388]\"   \"(0.388,0.443]\"   #> [5] \"(0.443,0.491]\"   \"(0.491,0.536]\"   \"(0.536,0.585]\"   \"(0.585,0.862]\" getZeroBin(bins) #> [1] 2 plotBinDensity(lmrsel$deltaMeth, bins, legend = \"topleft\")"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"prepare-motif-enrichment-analysis","dir":"Articles","previous_headings":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","what":"Prepare motif enrichment analysis","title":"monaLisa - MOtif aNAlysis with Lisa","text":"Next prepare motif enrichment analysis. first need known motifs representing transcription factor binding site preferences. extract vertebrate motifs JASPAR2020 package positional weight matrices (PWMs): Furthermore, need sequences corresponding LMRs. sequences one bin compared sequences bins, want differences sequence lengths composition bins might bias motif enrichment results. general, recommend use regions similar even equal lengths avoid length bias, example using fixed-size region around midpoint region interest using GenomicRanges::resize. addition, resized regions may constrained chromosome boundaries using trim: can now directly extract corresponding sequences BSgenome.Mmusculus.UCSC.mm10 package (assuming started analysis genomic regions - already sequences, just skip step) check differences sequence composition bins using plotBinDiagnostics function. “GCfrac” plot distributions fraction G+C bases, “dinucfreq” creates heatmap average di-nucleotide frequencies bin, relative overall average.   plots, can see LMRs lower methylation NP cells compared ES cells (bin [-0.935,-0.242]) tend GC-poorer LMRs bins. strong bias kind give rise false positives bin, e.g. enrichments -rich motifs. point analysis, difficult decide bias addressed (example subsampling sequences comparable GC composition), bias can ignored built-sequence composition correction calcBinnedMotifEnrR able account . recommendation take mental note point remember sequences [-0.935,-0.242] bin tend GC-poorer. Later, check -rich motifs specifically enriched bin, case, critically assess result robust can reproduced analysis uses balanced sequences bins, analysis background = \"genome\". show_motif_GC show_seqlogo arguments plotMotifHeatmaps can help visually identify motif sequence composition enrichment result (see ).","code":"pwms <- getMatrixSet(JASPAR2020,                      opts = list(matrixtype = \"PWM\",                                  tax_group = \"vertebrates\")) summary(width(lmrsel)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     9.0   213.0   401.0   512.9   676.0  5973.0 lmrsel <- trim(resize(lmrsel, width = median(width(lmrsel)), fix = \"center\")) summary(width(lmrsel)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     401     401     401     401     401     401 lmrseqs <- getSeq(BSgenome.Mmusculus.UCSC.mm10, lmrsel) plotBinDiagnostics(seqs = lmrseqs, bins = bins, aspect = \"GCfrac\") plotBinDiagnostics(seqs = lmrseqs, bins = bins, aspect = \"dinucfreq\")"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"runBinned","dir":"Articles","previous_headings":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","what":"Run motif enrichment analysis","title":"monaLisa - MOtif aNAlysis with Lisa","text":"Finally, run binned motif enrichment analysis. step take , typically use BPPARAM argument run parallelization using n cores follows: calcBinnedMotifEnrR(..., BPPARAM = BiocParallel::MulticoreParam(n))). example however, can skip next step just load pre-computed results shown . case run code, let’s now read results: se SummarizedExperiment object nicely keeps motifs, bins corresponding metadata together: can plot results using plotMotifHeatmaps function, e.g. selecting transcription factor motifs −log10FDR-log_{10} FDR least 4.0 bin (corresponding FDR<10−4FDR < 10^{-4}). FDR values stored negLog10Padj assay:  order select motifs significant enrichments specific bin, bin except “zero” bin, use: Setting cluster = TRUE plotMotifHeatmaps re-ordered rows using hierarchical clustering pearsonResid assay. many transcription factor binding motifs similar , also helpful show enrichment heatmap clustered motif similarity. end, first calculate pairwise motif similarities (measured maximum Pearson correlation possible shifted alignments). can quickly calculated selected motifs using motifSimilarity function. many motifs, step may take , may useful parallelize using BPPARAM argument (e.g. run n parallel threads using multi-core backend, can use: motifSimilarity(..., BPPARAM = BiocParallel::MulticoreParam(n))). order TFs resulting matrix consistent elements seSel, maximal similarity pair motifs 1.0. subtracting similarities 1.0, obtain distances use perform hierarchical clustering stats::hclust function. returned object (hcl) passed cluster argument plotMotifHeatmaps define order rows heatmap. plotting dendrogram controlled argument show_dendrogram, also display motifs sequence logos using show_seqlogo:  seen sequences [-0.935,-0.242] bin (first column left heatmap) GC-poorer sequences bins. enriched motifs bin GC-poor (example RARA, NR2F1 similar motifs), weakly enriched motifs clearly -rich (example HOX family motifs). verify false positive results, motif analysis repeated sequences subsampled bin similar GC composition bins, calcBinnedMotifEnrR(..., background = \"genome\"). latter illustrated section @ref(vsgenome).","code":"se <- calcBinnedMotifEnrR(seqs = lmrseqs, bins = bins, pwmL = pwms) se <- readRDS(system.file(\"extdata\", \"results.binned_motif_enrichment_LMRs.rds\",                           package = \"monaLisa\")) # summary se #> class: SummarizedExperiment  #> dim: 746 8  #> metadata(5): bins bins.binmode bins.breaks bins.bin0 param #> assays(7): negLog10P negLog10Padj ... sumForegroundWgtWithHits #>   sumBackgroundWgtWithHits #> rownames(746): MA0004.1 MA0006.1 ... MA0528.2 MA0609.2 #> rowData names(5): motif.id motif.name motif.pfm motif.pwm #>   motif.percentGC #> colnames(8): [-0.935,-0.242] (-0.242,0.327] ... (0.536,0.585] #>   (0.585,0.862] #> colData names(6): bin.names bin.lower ... totalWgtForeground #>   totalWgtBackground dim(se) # motifs-by-bins #> [1] 746   8  # motif info rowData(se) #> DataFrame with 746 rows and 5 columns #>             motif.id   motif.name                       motif.pfm #>          <character>  <character>                  <PFMatrixList> #> MA0004.1    MA0004.1         Arnt         MA0004.1; Arnt; Unknown #> MA0006.1    MA0006.1    Ahr::Arnt    MA0006.1; Ahr::Arnt; Unknown #> MA0019.1    MA0019.1 Ddit3::Cebpa MA0019.1; Ddit3::Cebpa; Unknown #> MA0029.1    MA0029.1        Mecom        MA0029.1; Mecom; Unknown #> MA0030.1    MA0030.1        FOXF2        MA0030.1; FOXF2; Unknown #> ...              ...          ...                             ... #> MA0093.3    MA0093.3         USF1         MA0093.3; USF1; Unknown #> MA0526.3    MA0526.3         USF2         MA0526.3; USF2; Unknown #> MA0748.2    MA0748.2          YY2          MA0748.2; YY2; Unknown #> MA0528.2    MA0528.2       ZNF263       MA0528.2; ZNF263; Unknown #> MA0609.2    MA0609.2         CREM         MA0609.2; CREM; Unknown #>                                                            motif.pwm #>                                                       <PWMatrixList> #> MA0004.1       MA0004.1; Arnt; Basic helix-loop-helix factors (bHLH) #> MA0006.1  MA0006.1; Ahr::Arnt; Basic helix-loop-helix factors (bHLH) #> MA0019.1 MA0019.1; Ddit3::Cebpa; Basic leucine zipper factors (bZIP) #> MA0029.1                   MA0029.1; Mecom; C2H2 zinc finger factors #> MA0030.1           MA0030.1; FOXF2; Fork head / winged helix factors #> ...                                                              ... #> MA0093.3       MA0093.3; USF1; Basic helix-loop-helix factors (bHLH) #> MA0526.3       MA0526.3; USF2; Basic helix-loop-helix factors (bHLH) #> MA0748.2                     MA0748.2; YY2; C2H2 zinc finger factors #> MA0528.2                  MA0528.2; ZNF263; C2H2 zinc finger factors #> MA0609.2         MA0609.2; CREM; Basic leucine zipper factors (bZIP) #>          motif.percentGC #>                <numeric> #> MA0004.1         64.0893 #> MA0006.1         71.5266 #> MA0019.1         48.3898 #> MA0029.1         28.0907 #> MA0030.1         34.2125 #> ...                  ... #> MA0093.3         51.0234 #> MA0526.3         51.4931 #> MA0748.2         67.2542 #> MA0528.2         67.4339 #> MA0609.2         53.2402 head(rownames(se)) #> [1] \"MA0004.1\" \"MA0006.1\" \"MA0019.1\" \"MA0029.1\" \"MA0030.1\" \"MA0031.1\"  # bin info colData(se) #> DataFrame with 8 rows and 6 columns #>                       bin.names bin.lower bin.upper bin.nochange #>                     <character> <numeric> <numeric>    <logical> #> [-0.935,-0.242] [-0.935,-0.242] -0.935484 -0.242127        FALSE #> (-0.242,0.327]   (-0.242,0.327] -0.242127  0.327369         TRUE #> (0.327,0.388]     (0.327,0.388]  0.327369  0.387698        FALSE #> (0.388,0.443]     (0.388,0.443]  0.387698  0.443079        FALSE #> (0.443,0.491]     (0.443,0.491]  0.443079  0.490691        FALSE #> (0.491,0.536]     (0.491,0.536]  0.490691  0.535714        FALSE #> (0.536,0.585]     (0.536,0.585]  0.535714  0.584707        FALSE #> (0.585,0.862]     (0.585,0.862]  0.584707  0.862443        FALSE #>                 totalWgtForeground totalWgtBackground #>                          <numeric>          <numeric> #> [-0.935,-0.242]                800            8628.40 #> (-0.242,0.327]                4400            5576.92 #> (0.327,0.388]                  800            9186.26 #> (0.388,0.443]                  800            9186.58 #> (0.443,0.491]                  800            9195.14 #> (0.491,0.536]                  800            9157.61 #> (0.536,0.585]                  800            9163.05 #> (0.585,0.862]                  800            9137.44 head(colnames(se)) #> [1] \"[-0.935,-0.242]\" \"(-0.242,0.327]\"  \"(0.327,0.388]\"   \"(0.388,0.443]\"   #> [5] \"(0.443,0.491]\"   \"(0.491,0.536]\"  # assays: the motif enrichment results assayNames(se) #> [1] \"negLog10P\"                \"negLog10Padj\"             #> [3] \"pearsonResid\"             \"expForegroundWgtWithHits\" #> [5] \"log2enr\"                  \"sumForegroundWgtWithHits\" #> [7] \"sumBackgroundWgtWithHits\" assay(se, \"log2enr\")[1:5, 1:3] #>          [-0.935,-0.242] (-0.242,0.327] (0.327,0.388] #> MA0004.1      -0.4332719    -0.16418567   0.047435758 #> MA0006.1       0.2407477    -0.11995829  -0.005914484 #> MA0019.1      -0.6736372     0.26842621   0.030973190 #> MA0029.1      -0.1475501    -0.12750322   0.088480526 #> MA0030.1      -0.4021844     0.06710565   0.152049687 # select strongly enriched motifs sel <- apply(assay(se, \"negLog10Padj\"), 1,               function(x) max(abs(x), 0, na.rm = TRUE)) > 4.0 sum(sel) #> [1] 59 seSel <- se[sel, ]  # plot plotMotifHeatmaps(x = seSel, which.plots = c(\"log2enr\", \"negLog10Padj\"),                    width = 2.0, cluster = TRUE, maxEnr = 2, maxSig = 10,                    show_motif_GC = TRUE) # significantly enriched in bin 8 levels(bins)[8] #> [1] \"(0.585,0.862]\" sel.bin8 <- assay(se, \"negLog10Padj\")[, 8] > 4.0 sum(sel.bin8, na.rm = TRUE) #> [1] 10  # significantly enriched in any \"non-zero\" bin getZeroBin(bins) #> [1] 2 sel.nonZero <- apply(     assay(se, \"negLog10Padj\")[, -getZeroBin(bins), drop = FALSE], 1,     function(x) max(abs(x), 0, na.rm = TRUE)) > 4.0 sum(sel.nonZero) #> [1] 55 SimMatSel <- motifSimilarity(rowData(seSel)$motif.pfm) range(SimMatSel) #> [1] 0.05339967 1.00000000 # create hclust object, similarity defined by 1 - Pearson correlation hcl <- hclust(as.dist(1 - SimMatSel), method = \"average\") plotMotifHeatmaps(x = seSel, which.plots = c(\"log2enr\", \"negLog10Padj\"),                    width = 1.8, cluster = hcl, maxEnr = 2, maxSig = 10,                   show_dendrogram = TRUE, show_seqlogo = TRUE,                   width.seqlogo = 1.2)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"motifConvert","dir":"Articles","previous_headings":"Binned motif enrichment analysis with multiple sets of sequences (more than two): Finding TFs enriched in differentially methylated regions","what":"Convert between motif text file for Homer and motif objects in R","title":"monaLisa - MOtif aNAlysis with Lisa","text":"monaLisa provides two functions performing binned motif enrichment analysis (calcBinnedMotifEnrR calcBinnedMotifEnrHomer). calcBinnedMotifEnrR implements binned motif enrichment analysis R, similarly Homer, require user Homer tool pre-installed. information function resembles Homer tool see function documentation. simple way represent DNA sequence motif assumes independence positions motif matrix four rows (bases , C, G T) n columns n positions motif. values matrix can represent sequence preferences binding protein several different ways: Position frequency matrices (PFM) contain values correspond number times (frequency) given base observed given position motif. usually obtained set known, aligned binding site sequences, depending number sequences, values lower higher. R, PFMs often represented using TFBSTools::PFMatrix (single motif) TFBSTools::PFMatrixList (set motifs) objects. rawest way represent sequence motif can converted representation. Position probability matrices (PPM) obtained dividing counts column PFM sum. values now give probability observing given base position motif sum one column. representation used motif text files Homer. PPM can converted back PFM knowing assuming many binding site sequences observed (see argument n homerToPFMatrixList). Position weight matrices (PWM) (also known position specific scoring matrices, PSSM) obtained comparing base probabilities PPM probabilities observing base outside binding site (background base probabilities), example calculating log-odds scores (see TFBSTools::toPWM details). useful representation scanning sequences motif matches. R, PWMs often represented using TFBSTools::PWMatrix (single motif) TFBSTools::PWMatrixList (set motifs). calcBinnedMotifEnrR takes PWMs TFBSTools::PWMatrixList object scan motif hits. calcBinnedMotifEnrHomer hand takes motif text file PPMs, requires user Homer installed use binned motif enrichment analysis. , show one can get motif PFMs JASPAR2020 convert Homer-compatible text file PPMs (dumpJaspar) vice versa (homerToPFMatrixList), convert TFBSTools::PFMatrixList TFBSTools::PWMatrixList use calcBinnedMotifEnrR findMotifHits:","code":"# get PFMs from JASPAR2020 package (vertebrate subset) pfms <- getMatrixSet(JASPAR2020,                      opts = list(matrixtype = \"PFM\",                                  tax_group = \"vertebrates\"))  # convert PFMs to PWMs pwms <- toPWM(pfms)  # convert JASPAR2020 PFMs (vertebrate subset) to Homer motif file tmp <- tempfile() convert <- dumpJaspar(filename = tmp,                       pkg = \"JASPAR2020\",                       pseudocount = 0,                       opts = list(tax_group = \"vertebrates\"))  # convert Homer motif file to PFMatrixList pfms_ret <- homerToPFMatrixList(filename = tmp, n = 100L)  # compare the first PFM # - notice the different magnitude of counts (controlled by `n`) # - notice that with the default (recommended) value of `pseudocount = 1.0`, #   there would be no zero values in pfms_ret matrices, making #   pfms and pfms_ret even more different as.matrix(pfms[[1]]) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> A    4   19    0    0    0    0 #> C   16    0   20    0    0    0 #> G    0    1    0   20    0   20 #> T    0    0    0    0   20    0 as.matrix(pfms_ret[[1]]) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> A   20   95    0    0    0    0 #> C   80    0  100    0    0    0 #> G    0    5    0  100    0  100 #> T    0    0    0    0  100    0  # compare position probability matrices with the original PFM  round(sweep(x = as.matrix(pfms[[1]]), MARGIN = 2,              STATS = colSums(as.matrix(pfms[[1]])), FUN = \"/\"), 3) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> A  0.2 0.95    0    0    0    0 #> C  0.8 0.00    1    0    0    0 #> G  0.0 0.05    0    1    0    1 #> T  0.0 0.00    0    0    1    0 round(sweep(x = as.matrix(pfms_ret[[1]]), MARGIN = 2,              STATS = colSums(as.matrix(pfms_ret[[1]])), FUN = \"/\"), 3) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> A  0.2 0.95    0    0    0    0 #> C  0.8 0.00    1    0    0    0 #> G  0.0 0.05    0    1    0    1 #> T  0.0 0.00    0    0    1    0"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"nobins","dir":"Articles","previous_headings":"","what":"Motif enrichment analysis with only one or two sets of sequences","title":"monaLisa - MOtif aNAlysis with Lisa","text":"cases, interested identifying enriched motifs just two sets sequences (binary motif enrichment), example ATAC peaks increased decreased accessibility. Numerical values used grouping regions multiple bins may available. may interested analyzing just single set sequences (example set ChIP-seq peaks), relative neutral background. section, show binary single-set motif enrichment analyses can performed using monaLisa.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"binary","dir":"Articles","previous_headings":"Motif enrichment analysis with only one or two sets of sequences","what":"Binary motif enrichment analysis: comparing two sets of sequences","title":"monaLisa - MOtif aNAlysis with Lisa","text":"binary motif enrichment analysis simple special case general binned motif analysis described section @ref(binned), two sets compared defining two bins. Let’s re-use DNA methylation data section @ref(binned) assume just want compare sequences don’t show large changes methylation levels (lmr.unchanged, changes smaller 5%) gain 60% methylation (lmr.): , need single sequence object (lmrseqs2, DNAStringSet) obtain combining two groups single GRanges object (lmrsel2) extract corresponding sequences genome (lmrseqs2). already two sequence objects, can just concatenated using lmrseqs2 <- c(seqs.group1, seqs.group2). Finally, manually create binning factor (bins2) defines group membership element lmrseqs2: Now can run binned motif enrichment analysis. keep calculation time short, just run motifs selected seSel: visualize results motifs enriched one two groups adjusted p value less 10−410^{-4} (order columns heatmap defined order factor levels bins2, given levels(bins2) can also obtained colnames(se2); unchanged, ):","code":"lmr.unchanged <- lmrsel[abs(lmrsel$deltaMeth) < 0.05] length(lmr.unchanged) #> [1] 608  lmr.up <- lmrsel[lmrsel$deltaMeth > 0.6] length(lmr.up) #> [1] 630 # combine the two sets or genomic regions lmrsel2 <- c(lmr.unchanged, lmr.up)  # extract sequences from the genome lmrseqs2 <- getSeq(BSgenome.Mmusculus.UCSC.mm10, lmrsel2) # define binning vector bins2 <- rep(c(\"unchanged\", \"up\"), c(length(lmr.unchanged), length(lmr.up))) bins2 <- factor(bins2) table(bins2) #> bins2 #> unchanged        up  #>       608       630 se2 <- calcBinnedMotifEnrR(seqs = lmrseqs2, bins = bins2,                            pwmL = pwms[rownames(seSel)]) se2 #> class: SummarizedExperiment  #> dim: 59 2  #> metadata(5): bins bins.binmode bins.breaks bins.bin0 param #> assays(7): negLog10P negLog10Padj ... sumForegroundWgtWithHits #>   sumBackgroundWgtWithHits #> rownames(59): MA0070.1 MA0077.1 ... MA1113.2 MA0143.4 #> rowData names(5): motif.id motif.name motif.pfm motif.pwm #>   motif.percentGC #> colnames(2): unchanged up #> colData names(6): bin.names bin.lower ... totalWgtForeground #>   totalWgtBackground sel2 <- apply(assay(se2, \"negLog10Padj\"), 1,               function(x) max(abs(x), 0, na.rm = TRUE)) > 4.0 sum(sel2) #> [1] 12  plotMotifHeatmaps(x = se2[sel2,], which.plots = c(\"log2enr\", \"negLog10Padj\"),                    width = 1.8, cluster = TRUE, maxEnr = 2, maxSig = 10,                   show_seqlogo = TRUE)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"vsgenome","dir":"Articles","previous_headings":"Motif enrichment analysis with only one or two sets of sequences","what":"Single set motif enrichment analysis: comparing a set of sequences to a suitable background","title":"monaLisa - MOtif aNAlysis with Lisa","text":"Motif enrichments can also obtained single set genomic regions sequences (foreground set), comparing suitable background set. suitable background set example sequences similar sequence composition randomly selected genome, sequences obtained randomization foreground sequences shuffling permutation. noteworthy package context nullranges focuses selection background ranges (representing null hypothesis), example controlling confounding covariates like GC composition. suitable background set identified using nullranges, binary motif enrichment analysis described section @ref(binary) can performed. Manually defining background set recommended control covariates GC composition get access selected background sequences, example verify indeed similar foreground sequences covariates. quick alternative less flexibility background set definition available directly monaLisa, using calcBinnedMotifEnrR(..., background = \"genome\"). select background set randomly sampling sequences genome (given genome argument, optionally restricted intervals defined genome.regions argument). foreground sequence, genome.oversample background sequences size (average) sampled. , one per foreground sequence selected trying best match G+C composition. apply simple approach check motif enrichments identified section @ref(binned) part false positives due GC-poor first bin ([-0.935,-0.242], see ). Let’s first obtain sequences bin (lmrseqs3), run calcBinnedMotifEnrR comparing genome background. order make sampling reproducible, seeding random number generator inside BPPARAM object. Also, speed calculation, include motifs selected seSel: Note provide bins argument, result single column, corresponding single set sequences analyzed: visualize motifs enriched adjusted p value less 10−410^{-4}, still find -rich motifs significantly enriched, including HOX family motifs weakly enriched seSel unclear enrichment driven -rich (GC-poor) sequences specific bin. fact motif family still robustly identified using GC-matched genomic background supports may real biological signal.  comparison log2 motif enrichments background = \"otherBins\" background = \"genome\" analyses also supports conclusion: HOX family motifs (shown red) similarly enriched analyses, depletion GC-rich KLF family motifs (shown green) less pronounced background = \"genome\" thus sensitive used background. depletion KLF family motifs may thus example incorrect result, although note depletion significant either two analyses:","code":"lmrseqs3 <- lmrseqs[bins == levels(bins)[1]] length(lmrseqs3) #> [1] 800  se3 <- calcBinnedMotifEnrR(seqs = lmrseqs3,                            pwmL = pwms[rownames(seSel)],                            background = \"genome\",                            genome = BSgenome.Mmusculus.UCSC.mm10,                            genome.regions = NULL, # sample from full genome                            genome.oversample = 2,                             BPPARAM = BiocParallel::SerialParam(RNGseed = 42),                            verbose = TRUE) #> Filtering sequences ... #>   in total filtering out 0 of 800 sequences (0%) #> Scanning sequences for motif hits... #> Create motif hit matrix... #> starting analysis of bin 1 #> Defining background sequence set (genome)... #> Scanning genomic background sequences for motif hits... #> Correcting for GC differences to the background sequences... #>   8 of 9 GC-bins used (have both fore- and background sequences) #>   0 of 1600 sequences (0%) filtered out from unused GC-bins. #> Correcting for k-mer differences between fore- and background sequences... #>   starting iterative adjustment for k-mer composition (up to 160 iterations) #>     40 of 160 iterations done #>     80 of 160 iterations done #>     120 of 160 iterations done #>     160 of 160 iterations done #>     iterations finished #> Calculating motif enrichment... #> using Fisher's exact test (one-sided) to calculate log(p-values) for enrichments ncol(se3) #> [1] 1 sel3 <- assay(se3, \"negLog10Padj\")[, 1] > 4.0 sum(sel3) #> [1] 31  plotMotifHeatmaps(x = se3[sel3,], which.plots = c(\"log2enr\", \"negLog10Padj\"),                    width = 1.8, maxEnr = 2, maxSig = 10,                   show_seqlogo = TRUE) # analyzed HOX motifs grep(\"HOX\", rowData(se3)$motif.name, value = TRUE) #> MA1498.1 MA1499.1 MA1500.1 MA1502.1 MA1504.1 MA1507.1 MA0900.2 MA0910.2  #>  \"HOXA7\"  \"HOXB4\"  \"HOXB6\"  \"HOXB8\"  \"HOXC4\"  \"HOXD4\"  \"HOXA2\"  \"HOXD8\"  # significant HOX motifs grep(\"HOX\", rowData(se3)$motif.name[sel3], value = TRUE) #> MA1498.1 MA1499.1 MA1500.1 MA1502.1 MA1504.1 MA1507.1 MA0900.2 MA0910.2  #>  \"HOXA7\"  \"HOXB4\"  \"HOXB6\"  \"HOXB8\"  \"HOXC4\"  \"HOXD4\"  \"HOXA2\"  \"HOXD8\" cols <- rep(\"gray\", nrow(se3)) cols[grep(\"HOX\", rowData(se3)$motif.name)] <- \"#DF536B\" cols[grep(\"KLF|Klf\", rowData(se3)$motif.name)] <- \"#61D04F\" par(mar = c(5, 5, 2, 2) + .1, mgp = c(1.75, 0.5, 0), cex = 1.25) plot(assay(seSel, \"log2enr\")[,1], assay(se3, \"log2enr\")[,1],      col = cols, pch = 20, asp = 1,      xlab = \"Versus other bins (log2 enr)\",      ylab = \"Versus genome (log2 enr)\") legend(\"topleft\", c(\"HOX family\",\"KLF family\",\"other\"), pch = 20, bty = \"n\",        col = c(\"#DF536B\", \"#61D04F\", \"gray\")) abline(a = 0, b = 1) abline(h = 0, lty = 3) abline(v = 0, lty = 3)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"binnedkmers","dir":"Articles","previous_headings":"","what":"Binned k-mer enrichment analysis","title":"monaLisa - MOtif aNAlysis with Lisa","text":"situations may beneficial perform enrichment analysis ‘unbiased’ way, using k-mers rather annotated motifs. , illustrate process using LMR data set used motif enrichment analysis section @ref(binned). Similarly motif enrichment, step takes perform, can also skip next step load processed object directly. Just motif enrichment analysis, return value SummarizedExperiment object, set assays annotations. motif enrichment, can extract k-mer enriched bins. Next, let’s compare enriched k-mers motifs found earlier. can done using motifKmerSimilarity function. showing similarity enriched k-mers motifs, can see whether, e.g., strongly enriched k-mers seem correspond annotated motif.","code":"sekm <- calcBinnedKmerEnr(seqs = lmrseqs, bins = bins, kmerLen = 6,                            includeRevComp = TRUE) sekm <- readRDS(system.file(     \"extdata\", \"results.binned_6mer_enrichment_LMRs.rds\",     package = \"monaLisa\" )) sekm #> class: SummarizedExperiment  #> dim: 4096 8  #> metadata(5): bins bins.binmode bins.breaks bins.bin0 param #> assays(7): negLog10P negLog10Padj ... sumForegroundWgtWithHits #>   sumBackgroundWgtWithHits #> rownames(4096): AAAAAA AAAAAC ... TTTTTG TTTTTT #> rowData names(5): motif.id motif.name motif.pfm motif.pwm #>   motif.percentGC #> colnames(8): [-0.935,-0.242] (-0.242,0.327] ... (0.536,0.585] #>   (0.585,0.862] #> colData names(6): bin.names bin.lower ... totalWgtForeground #>   totalWgtBackground selkm <- apply(assay(sekm, \"negLog10Padj\"), 1,                 function(x) max(abs(x), 0, na.rm = TRUE)) > 4 sum(selkm) #> [1] 85 sekmSel <- sekm[selkm, ] pfmSel <- rowData(seSel)$motif.pfm sims <- motifKmerSimilarity(x = pfmSel,                             kmers = rownames(sekmSel),                             includeRevComp = TRUE) dim(sims) #> [1] 59 85  maxwidth <- max(sapply(TFBSTools::Matrix(pfmSel), ncol)) seqlogoGrobs <- lapply(pfmSel, seqLogoGrob, xmax = maxwidth) hmSeqlogo <- rowAnnotation(logo = annoSeqlogo(seqlogoGrobs, which = \"row\"),                            annotation_width = unit(1.5, \"inch\"),                             show_annotation_name = FALSE ) Heatmap(sims,          show_row_names = TRUE, row_names_gp = gpar(fontsize = 8),         show_column_names = TRUE, column_names_gp = gpar(fontsize = 8),         name = \"Similarity\", column_title = \"Selected TFs and enriched k-mers\",         col = colorRamp2(c(0, 1), c(\"white\", \"red\")),          right_annotation = hmSeqlogo)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"findhits","dir":"Articles","previous_headings":"","what":"Use monaLisa to annotate genomic regions with predicted motifs","title":"monaLisa - MOtif aNAlysis with Lisa","text":"mentioned, monaLisa can also used scan sequences motifs. quick description motif representations see section @ref(motifConvert). example (just sequences/motifs illustration): transformation sequence PWM names factors defined levels creation hit matrix strictly needed, ensures even sequences motifs without hits reported matrix, order sequences (rows) motifs (columns) identical order seqs pwms.","code":"# get sequences of promoters as a DNAStringSet # (the `subject` of `findMotifHits` could also be a single DNAString, #  or the name of a fasta file) library(TxDb.Mmusculus.UCSC.mm10.knownGene) #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi gr <- trim(promoters(TxDb.Mmusculus.UCSC.mm10.knownGene,                      upstream = 1000, downstream = 500)[c(1, 4, 5, 10)]) library(BSgenome.Mmusculus.UCSC.mm10) seqs <- getSeq(BSgenome.Mmusculus.UCSC.mm10, gr) seqs #> DNAStringSet object of length 4: #>     width seq                                               names                #> [1]  1500 CCCTTTTGGATAGATTCTAGGCT...GCTGATTTATGAGTAAGGGATGT ENSMUST00000193812.1 #> [2]  1500 TGCGGTATGTTCATGTATACATG...ATGAATTTACCAATGCCACACAG ENSMUST00000161581.1 #> [3]  1500 TGATTAAGAAAATTCCCTGGTGG...CCCTTGGTGTGGTAGTCACGTCC ENSMUST00000192183.1 #> [4]  1500 TGGAAATGTCTTCCCTCACCCCT...AGGAACCTAGCCTGTCACCCGCA ENSMUST00000195361.1  # get motifs as a PWMatrixList # (the `query` of `findMotifHits` could also be a single PWMatrix, #  or the name of a motif file) library(JASPAR2020) library(TFBSTools) pfms <- getMatrixByID(JASPAR2020, c(\"MA0885.1\", \"MA0099.3\", \"MA0033.2\",                                      \"MA0037.3\", \"MA0158.1\")) pwms <- toPWM(pfms) pwms #> PWMatrixList of length 5 #> names(5): MA0885.1 MA0099.3 MA0033.2 MA0037.3 MA0158.1 name(pwms) #>   MA0885.1   MA0099.3   MA0033.2   MA0037.3   MA0158.1  #>     \"Dlx2\" \"FOS::JUN\"    \"FOXL1\"    \"GATA3\"    \"HOXA5\"  # predict hits in sequences res <- findMotifHits(query = pwms,                      subject = seqs,                      min.score = 6.0,                      method = \"matchPWM\",                      BPPARAM = BiocParallel::SerialParam()) res #> GRanges object with 115 ranges and 4 metadata columns: #>                     seqnames    ranges strand |     matchedSeq    pwmid pwmname #>                        <Rle> <IRanges>  <Rle> | <DNAStringSet>    <Rle>   <Rle> #>     [1] ENSMUST00000193812.1    93-100      + |       CTCTTATG MA0158.1   HOXA5 #>     [2] ENSMUST00000193812.1   103-110      + |       AGCTAATT MA0158.1   HOXA5 #>     [3] ENSMUST00000193812.1   252-259      + |       GTCATTAT MA0885.1    Dlx2 #>     [4] ENSMUST00000193812.1   355-362      + |       TGATAAAT MA0037.3   GATA3 #>     [5] ENSMUST00000193812.1   358-365      + |       TAAATTAT MA0885.1    Dlx2 #>     ...                  ...       ...    ... .            ...      ...     ... #>   [111] ENSMUST00000195361.1   742-749      - |       ATGAAATT MA0158.1   HOXA5 #>   [112] ENSMUST00000195361.1   833-840      - |       ACAATTAT MA0885.1    Dlx2 #>   [113] ENSMUST00000195361.1   842-849      - |       GTAATTAA MA0885.1    Dlx2 #>   [114] ENSMUST00000195361.1   844-851      - |       AAGTAATT MA0158.1   HOXA5 #>   [115] ENSMUST00000195361.1   865-872      - |       ACCATTAT MA0885.1    Dlx2 #>             score #>         <numeric> #>     [1]   6.98342 #>     [2]   7.96626 #>     [3]   6.64334 #>     [4]   6.76273 #>     [5]   6.36851 #>     ...       ... #>   [111]   6.61929 #>   [112]  10.61685 #>   [113]  10.97719 #>   [114]   7.96626 #>   [115]   6.28806 #>   ------- #>   seqinfo: 4 sequences from an unspecified genome  # create hit matrix: # number of sites of each motif per sequence m <- table(factor(seqnames(res), levels = names(seqs)),            factor(res$pwmname, levels = name(pwms))) m #>                        #>                        Dlx2 FOS::JUN FOXL1 GATA3 HOXA5 #>   ENSMUST00000193812.1    4        2    12     7    10 #>   ENSMUST00000161581.1   10        1     3     5    10 #>   ENSMUST00000192183.1    4        2     2     3    13 #>   ENSMUST00000195361.1   11        1     5     0    10"},{"path":"https://fmicompbio.github.io/monaLisa/articles/monaLisa.html","id":"session-info-and-logo","dir":"Articles","previous_headings":"","what":"Session info and logo","title":"monaLisa - MOtif aNAlysis with Lisa","text":"monaLisa logo uses drawing obtained http://vectorish.com/lisa-simpson.html Creative Commons attribution - non-commercial 3.0 license: https://creativecommons.org/licenses/-nc/3.0/. vignette built using:","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sonoma 14.7 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: UTC #> tzcode source: internal #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] TxDb.Mmusculus.UCSC.mm10.knownGene_3.10.0 #>  [2] GenomicFeatures_1.57.1                    #>  [3] AnnotationDbi_1.67.0                      #>  [4] circlize_0.4.16                           #>  [5] ComplexHeatmap_2.21.1                     #>  [6] monaLisa_1.11.4                           #>  [7] BSgenome.Mmusculus.UCSC.mm10_1.4.3        #>  [8] BSgenome_1.73.1                           #>  [9] rtracklayer_1.65.0                        #> [10] BiocIO_1.15.2                             #> [11] Biostrings_2.73.2                         #> [12] XVector_0.45.0                            #> [13] TFBSTools_1.43.0                          #> [14] JASPAR2020_0.99.10                        #> [15] SummarizedExperiment_1.35.3               #> [16] Biobase_2.65.1                            #> [17] MatrixGenerics_1.17.0                     #> [18] matrixStats_1.4.1                         #> [19] GenomicRanges_1.57.1                      #> [20] GenomeInfoDb_1.41.2                       #> [21] IRanges_2.39.2                            #> [22] S4Vectors_0.43.2                          #> [23] BiocGenerics_0.51.3                       #> [24] BiocStyle_2.33.1                          #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3          jsonlite_1.8.9              #>   [3] shape_1.4.6.1               magrittr_2.0.3              #>   [5] rmarkdown_2.28              GlobalOptions_0.1.2         #>   [7] fs_1.6.4                    zlibbioc_1.51.1             #>   [9] ragg_1.3.3                  vctrs_0.6.5                 #>  [11] memoise_2.0.1               Rsamtools_2.21.2            #>  [13] RCurl_1.98-1.16             htmltools_0.5.8.1           #>  [15] S4Arrays_1.5.10             curl_5.2.3                  #>  [17] CNEr_1.41.0                 SparseArray_1.5.44          #>  [19] sass_0.4.9                  pracma_2.4.4                #>  [21] bslib_0.8.0                 desc_1.4.3                  #>  [23] plyr_1.8.9                  zoo_1.8-12                  #>  [25] cachem_1.1.0                GenomicAlignments_1.41.0    #>  [27] lifecycle_1.0.4             iterators_1.0.14            #>  [29] pkgconfig_2.0.3             Matrix_1.7-0                #>  [31] R6_2.5.1                    fastmap_1.2.0               #>  [33] GenomeInfoDbData_1.2.13     clue_0.3-65                 #>  [35] digest_0.6.37               colorspace_2.1-1            #>  [37] TFMPvalue_0.0.9             stabs_0.6-4                 #>  [39] textshaping_0.4.0           RSQLite_2.3.7               #>  [41] seqLogo_1.71.0              fansi_1.0.6                 #>  [43] httr_1.4.7                  abind_1.4-8                 #>  [45] compiler_4.4.1              bit64_4.5.2                 #>  [47] doParallel_1.0.17           BiocParallel_1.39.0         #>  [49] DBI_1.2.3                   highr_0.11                  #>  [51] R.utils_2.12.3              poweRlaw_0.80.0             #>  [53] DelayedArray_0.31.14        rjson_0.2.23                #>  [55] gtools_3.9.5                caTools_1.18.3              #>  [57] tools_4.4.1                 R.oo_1.26.0                 #>  [59] glue_1.8.0                  restfulr_0.0.15             #>  [61] cluster_2.1.6               reshape2_1.4.4              #>  [63] generics_0.1.3              gtable_0.3.5                #>  [65] tzdb_0.4.0                  sm_2.2-6.0                  #>  [67] R.methodsS3_1.8.2           hms_1.1.3                   #>  [69] utf8_1.2.4                  foreach_1.5.2               #>  [71] pillar_1.9.0                stringr_1.5.1               #>  [73] splines_4.4.1               dplyr_1.1.4                 #>  [75] lattice_0.22-6              survival_3.7-0              #>  [77] bit_4.5.0                   annotate_1.83.0             #>  [79] tidyselect_1.2.1            DirichletMultinomial_1.47.0 #>  [81] vioplot_0.5.0               GO.db_3.20.0                #>  [83] knitr_1.48                  bookdown_0.40               #>  [85] xfun_0.48                   stringi_1.8.4               #>  [87] UCSC.utils_1.1.0            yaml_2.3.10                 #>  [89] evaluate_1.0.0              codetools_0.2-20            #>  [91] tibble_3.2.1                BiocManager_1.30.25         #>  [93] cli_3.6.3                   xtable_1.8-4                #>  [95] systemfonts_1.1.0           munsell_0.5.1               #>  [97] jquerylib_0.1.4             Rcpp_1.0.13                 #>  [99] png_0.1-8                   XML_3.99-0.17               #> [101] parallel_4.4.1              pkgdown_2.1.1.9000          #> [103] ggplot2_3.5.1               readr_2.1.5                 #> [105] blob_1.2.4                  bitops_1.0-9                #> [107] glmnet_4.1-8                pwalign_1.1.0               #> [109] scales_1.3.0                crayon_1.5.3                #> [111] GetoptLong_1.0.5            rlang_1.1.4                 #> [113] KEGGREST_1.45.1"},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Regression Based Approach for Motif Selection","text":"Identifying important transcription factor (TF) motifs, shown main vignette, also done using regression-based approach, motifs compete selection. framework, response vector can observed experimental measure interest, e.g. log-fold changes accessibility set regions, predictors consist TF motif hits across regions. monaLisa, implement randomized lasso stability selection proposed Meinshausen Bühlmann (2010) improved error bounds introduced Shah Samworth (2013). modified stabs::glmnet.lasso function used stabs::stabsel stabs package implement randomized lasso. Lasso stability selection performs lasso regression multiple times subsamples data, returns selection probability predictor (number times selected divided number regressions done). randomized lasso, weakness parameter additionally used vary lasso penalty term λ\\lambda randomly chosen value [λ\\lambda, λ\\lambda/weakness] predictor. type regularization advantages cases number predictors exceeds number observations, selecting variables consistently, demonstrating better error control depending strongly penalization parameter (Meinshausen Bühlmann 2010). approach, TF motifs compete explain response vector, can also include additional predictors like GC content compete TF motifs selection. especially useful response biased sequence composition, example regions higher GC content tend higher response values. worth noting , regression analysis, interpretability results depends strongly quality predictors. Hence, increasing size motif database , , guarantee interpretable results, since added motifs may unrelated signal interest. addition, discussed section @ref(collinearity), high level redundancy, resulting strong correlations among motifs, may result ambiguous selection probabilities regression approach. fact, also binned approach, although motifs evaluated independently association outcome, high degree redundancy can lead large collections similar motifs showing significant enrichments, complicating interpretability results.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"stabsel","dir":"Articles","previous_headings":"","what":"Motif selection with Randomized Lasso Stability Selection","title":"Regression Based Approach for Motif Selection","text":"example , select TF motifs explaining log-fold changes chromatin accessibility (ATAC-seq) across enhancers mouse liver lung tissue P0, can applied data types well (ChIP-seq, RNA-seq, methylation etc.). Positive log2-fold changes indicate accessibility liver tissue, whereas negative values indicate accessibility lung tissue.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"load-packages","dir":"Articles","previous_headings":"Motif selection with Randomized Lasso Stability Selection","what":"Load packages","title":"Regression Based Approach for Motif Selection","text":"start loading needed packages:","code":"library(monaLisa) library(JASPAR2020) library(TFBSTools) library(BSgenome.Mmusculus.UCSC.mm10) library(Biostrings) library(SummarizedExperiment) library(ComplexHeatmap) library(circlize)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"load-dataset","dir":"Articles","previous_headings":"Motif selection with Randomized Lasso Stability Selection","what":"Load dataset","title":"Regression Based Approach for Motif Selection","text":"example dataset ENCODE (ENCODE Project Consortium 2012), available monaLisa, quantified ATAC-seq reads enhancers mouse P0 lung liver tissues. log2-fold change (response vector example) liver vs lung chromatin accessibility. using set 10,000 randomly sampled enhancers illustrate randomized lasso stability selection can used select TF motifs.","code":"# load GRanges object with logFC and peaks gr_path <- system.file(\"extdata\", \"atac_liver_vs_lung.rds\",                         package = \"monaLisa\") gr <- readRDS(gr_path)"},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"get-tfbs-per-motif-and-peak","dir":"Articles","previous_headings":"Motif selection with Randomized Lasso Stability Selection","what":"Get TFBS per motif and peak","title":"Regression Based Approach for Motif Selection","text":"now construct transcription factor binding site (TFBS) matrix known motifs (database like JASPAR2020) given peak regions. use findMotifHits function scan TF motif hits. matrix predictor matrix regression. step may take , may useful parallelize using BPPARAM argument (e.g. run n parallel threads using multi-core backend, can use: findMotifHits(..., BPPARAM = BiocParallel::MulticoreParam(n))). mentioned, framework offers flexibility add additional predictors compete TF motifs selection. , add fraction G+C CpG observed/expected ratio predictors, ensure selected TF motifs just detecting simple trend GC CpG composition.","code":"# get PFMs (vertebrate TFs from Jaspar) pfms <- getMatrixSet(JASPAR2020, list(matrixtype = \"PFM\",                                        tax_group = \"vertebrates\"))  # randomly sample 300 PFMs for illustration purposes (for quick runtime) set.seed(4563) pfms <- pfms[sample(length(pfms), size = 300)]  # convert PFMs to PWMs pwms <- toPWM(pfms)  # get TFBS on given GRanges (peaks) # suppress warnings generated by matchPWM due to the presence of Ns  # in the sequences peakSeq <- getSeq(BSgenome.Mmusculus.UCSC.mm10, gr) suppressWarnings({   hits <- findMotifHits(query = pwms, subject = peakSeq, min.score = 10.0,                         BPPARAM = BiocParallel::SerialParam()) })  # get TFBS matrix TFBSmatrix <- unclass(table(factor(seqnames(hits), levels = seqlevels(hits)),                             factor(hits$pwmname, levels = name(pwms)))) TFBSmatrix[1:6, 1:6] #>               #>               NR3C2 Arnt LHX1 SNAI1 MAFG ZSCAN4 #>   peak_51663      0    0    0     0    0      0 #>   peak_57870      0    0    0     0    0      0 #>   peak_2986       2    0    0     0    0      0 #>   peak_124022     0    0    0     0    0      0 #>   peak_29925      0    2    0     1    0      0 #>   peak_95246      0    0    0     0    0      0  # remove TF motifs with 0 binding sites in all regions zero_TF <- colSums(TFBSmatrix) == 0 sum(zero_TF) #> [1] 2 TFBSmatrix <- TFBSmatrix[, !zero_TF]  # calculate G+C and CpG obs/expected fMono <- oligonucleotideFrequency(peakSeq, width = 1L, as.prob = TRUE) fDi <- oligonucleotideFrequency(peakSeq, width = 2L, as.prob = TRUE) fracGC <- fMono[, \"G\"] + fMono[, \"C\"] oeCpG <- (fDi[, \"CG\"] + 0.01) / (fMono[, \"G\"] * fMono[, \"C\"] + 0.01)  # add GC and oeCpG to predictor matrix TFBSmatrix <- cbind(fracGC, oeCpG, TFBSmatrix) TFBSmatrix[1:6, 1:6] #>                fracGC     oeCpG NR3C2 Arnt LHX1 SNAI1 #> peak_51663  0.5155709 0.4079115     0    0    0     0 #> peak_57870  0.4963235 0.3048298     0    0    0     0 #> peak_2986   0.4008264 0.3103806     2    0    0     0 #> peak_124022 0.4572650 0.4429813     0    0    0     0 #> peak_29925  0.4675000 0.3495939     0    2    0     1 #> peak_95246  0.5144509 0.4020976     0    0    0     0"},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"collinearity","dir":"Articles","previous_headings":"Motif selection with Randomized Lasso Stability Selection > Get TFBS per motif and peak","what":"A note on collinearity","title":"Regression Based Approach for Motif Selection","text":"point useful user get overall feeling collinearity structure TFBS matrix. Motifs share lot similar binding sites across peaks highly correlated. High collinearity predictors well known problem linear regression. particularly manifests lasso regression example, variables equally highly correlated response, co-selected predictors (signal variables). Instead, one arbitrarily chosen others’ coefficients set zero. rationale non-selected correlated predictors provide much additional information explain response. good aware properties regression, place weight meaning selected motif , rather specific TF name interpreting results. many cases high correlations exist concern, one may consider selecting representative set predictors use. may example achieved clustering weight matrices beforehand using one representative motif per cluster running regression, using tools example RSAT (Castro-Mondragon et al. 2017). RSAT-derived clusters Jaspar weight matrices can found https://jaspar.genereg.net/matrix-clusters/vertebrates/. user interested working correlated motifs, binned approach preferable motifs independently tested significance (see binned enrichment vignette). regression-based approach hand, can clearly understand relative contributions TF motifs response context .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"identify-important-tfs","dir":"Articles","previous_headings":"Motif selection with Randomized Lasso Stability Selection","what":"Identify important TFs","title":"Regression Based Approach for Motif Selection","text":"can now run randomized lasso stability selection identify TFs likely explain log-fold changes accessibility. exact choice parameter values approach depend largely stringent user wishes much signal data. example, stringent selections, one may decrease value weakness parameter make harder variable get selected. user control false discoveries PFER parameter, indicates number falsely selected variables. selection probability cutoff, Meinshausen Bühlmann (2010) argue values range [0.6, 0.9] give similar results. See randLassoStabSel function details default parameter values well stabs::stabsel function default assumptions stability selection implementation Shah Samworth (2013). stability paths visualize predictors get selected decreasing regularization stringency (left right):  line corresponds predictor, can see selection probabilities function regularization steps, corresponding decreasing values lambda regularization parameter lasso. predictor (TF motif) selection happens last step, given specified minimum probability. can also visualize selection probabilities selected TF motifs, optionally multiplied sign correlation response vector, know TF relates change accessibility (directional parameter). example, positive correlations response vector indicate correlation enhancers accessible liver, whereas negative ones indicate correlation enhancers accessible lung. Note although one can vary selProbMinPlot argument sets selection probability cutoff, best re-run randomized lasso stability selection new cutoff, influences parameter choices model uses internally. See Meinshausen Bühlmann (2010) details.  Next, visualize correlation structure selected TF motifs within TFBS matrix. collinearity predictors general issue regression-based approaches, randomized lasso stability selection normally better co-selecting intermediately correlated predictors. practice, see select predictors correlations high 0.9. However, good keep mind can issue, predictors highly correlated might end co-selected (see section @ref(collinearity)).    can examine peaks hits selected TF motif interest, ordered absolute accessibility changes.","code":"## randLassoStabSel() is stochastic, so if we run with parallelization ##   (`mc.cores` argument), we must select a random number generator that can ##   provide multiple streams of random numbers used in the `parallel` package ##   and set its seed for reproducible results # RNGkind(\"L'Ecuyer-CMRG\") # set.seed(123) # se <- randLassoStabSel(x = TFBSmatrix, y = gr$logFC_liver_vs_lung,  #                        cutoff = 0.8, mc.preschedule = TRUE,  #                        mc.set.seed = TRUE, mc.cores = 2L)  # if not running in parallel mode, it is enough to use set.seed() before  #   the call to ensure reproducibility (`mc.sores = 1`) set.seed(123) se <- randLassoStabSel(x = TFBSmatrix, y = gr$logFC_liver_vs_lung,                         cutoff = 0.8) se #> class: SummarizedExperiment  #> dim: 10000 300  #> metadata(12): stabsel.params.cutoff stabsel.params.selected ... #>   stabsel.params.call randStabsel.params.weakness #> assays(1): x #> rownames(10000): peak_51663 peak_57870 ... peak_98880 peak_67984 #> rowData names(1): y #> colnames(300): fracGC oeCpG ... CLOCK OLIG2 #> colData names(20): selProb selected ... regStep16 regStep17  # selected TFs colnames(se)[se$selected] #>  [1] \"NKX2-5\"       \"GATA1::TAL1\"  \"HNF1B\"        \"HNF4A(var.2)\" \"Nr2f6\"        #>  [6] \"ONECUT3\"      \"MYF5\"         \"THRB\"         \"ISL2\"         \"NR2C2\"        #> [11] \"TEAD3\"        \"TEAD4\"        \"GATA3\"        \"RORA\"         \"NFIC\"         #> [16] \"ZEB1\" plotStabilityPaths(se) plotSelectionProb(se, directional = TRUE) # subset the selected TFs sel <- colnames(se)[se$selected] se_sub <- se[, sel]  # exclude oeCpG and fracGC excl <- colnames(se_sub) %in% c(\"oeCpG\", \"fracGC\") se_sub <- se_sub[, !excl]  # correlation matrix  TFBSmatrixCorSel <- cor(TFBSmatrix[, colnames(se_sub)], method = \"pearson\")  # heatmap pfmsSel <- pfms[match(colnames(TFBSmatrixCorSel), name(pfms))] maxwidth <- max(sapply(TFBSTools::Matrix(pfmsSel), ncol)) seqlogoGrobs <- lapply(pfmsSel, seqLogoGrob, xmax = maxwidth)  hmSeqlogo <- rowAnnotation(logo = annoSeqlogo(seqlogoGrobs, which = \"row\"),                            annotation_width = unit(2, \"inch\"),                             show_annotation_name = FALSE )  colAnn <- HeatmapAnnotation(AUC = se_sub$selAUC, selProb = se_sub$selProb,                             show_legend = TRUE,                              show_annotation_name = TRUE,                             col = list(                               AUC = colorRamp2(c(0, 1),                                                 c(\"white\", \"brown\")),                               selProb = colorRamp2(c(0, 1),                                                     c(\"white\", \"steelblue\"))) )  Heatmap(TFBSmatrixCorSel,          show_row_names = TRUE,          show_column_names = TRUE,          name = \"Pear. Cor.\", column_title = \"Selected TFs\",         col = colorRamp2(c(-1, 0, 1), c(\"blue\", \"white\", \"red\")),          right_annotation = hmSeqlogo,         top_annotation = colAnn) TF <- sel[2] TF #> [1] \"GATA1::TAL1\"  i <- which(assay(se, \"x\")[, TF] > 0) # peaks that contain TF hits... nm <- names(sort(abs(gr$logFC_liver_vs_lung[i]),                   decreasing = TRUE)) # ... order by |logFC|  gr[nm] #> GRanges object with 1102 ranges and 1 metadata column: #>               seqnames              ranges strand | logFC_liver_vs_lung #>                  <Rle>           <IRanges>  <Rle> |           <numeric> #>    peak_59642     chr8   80499941-80501128      * |             5.31505 #>    peak_58095     chr8   40658907-40659590      * |             5.13536 #>   peak_100144    chr14   69318236-69318909      * |             5.09810 #>    peak_98635    chr14   41124351-41126121      * |             5.07972 #>    peak_42826     chr6   29700952-29701570      * |             5.02324 #>           ...      ...                 ...    ... .                 ... #>    peak_45104     chr6   84095148-84095495      * |        -0.020828315 #>    peak_16029     chr2 132269993-132270884      * |         0.007621169 #>    peak_55106     chr7 129526059-129526291      * |         0.004120784 #>    peak_97436    chr14   20873345-20873654      * |         0.000765027 #>    peak_67068     chr9   75050089-75050395      * |        -0.000217812 #>   ------- #>   seqinfo: 19 sequences from an unspecified genome; no seqlengths"},{"path":"https://fmicompbio.github.io/monaLisa/articles/selecting_motifs_with_randLassoStabSel.html","id":"session-info-and-logo","dir":"Articles","previous_headings":"","what":"Session info and logo","title":"Regression Based Approach for Motif Selection","text":"monaLisa logo uses drawing obtained http://vectorish.com/lisa-simpson.html Creative Commons attribution - non-commercial 3.0 license: https://creativecommons.org/licenses/-nc/3.0/. vignette built using:","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sonoma 14.7 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: UTC #> tzcode source: internal #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] circlize_0.4.16                    ComplexHeatmap_2.21.1              #>  [3] SummarizedExperiment_1.35.3        Biobase_2.65.1                     #>  [5] MatrixGenerics_1.17.0              matrixStats_1.4.1                  #>  [7] BSgenome.Mmusculus.UCSC.mm10_1.4.3 BSgenome_1.73.1                    #>  [9] rtracklayer_1.65.0                 BiocIO_1.15.2                      #> [11] Biostrings_2.73.2                  XVector_0.45.0                     #> [13] GenomicRanges_1.57.1               GenomeInfoDb_1.41.2                #> [15] IRanges_2.39.2                     S4Vectors_0.43.2                   #> [17] BiocGenerics_0.51.3                TFBSTools_1.43.0                   #> [19] JASPAR2020_0.99.10                 monaLisa_1.11.4                    #> [21] BiocStyle_2.33.1                   #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3          jsonlite_1.8.9              #>   [3] shape_1.4.6.1               magrittr_2.0.3              #>   [5] rmarkdown_2.28              GlobalOptions_0.1.2         #>   [7] fs_1.6.4                    zlibbioc_1.51.1             #>   [9] ragg_1.3.3                  vctrs_0.6.5                 #>  [11] memoise_2.0.1               Rsamtools_2.21.2            #>  [13] RCurl_1.98-1.16             htmltools_0.5.8.1           #>  [15] S4Arrays_1.5.10             curl_5.2.3                  #>  [17] CNEr_1.41.0                 SparseArray_1.5.44          #>  [19] sass_0.4.9                  pracma_2.4.4                #>  [21] bslib_0.8.0                 desc_1.4.3                  #>  [23] plyr_1.8.9                  zoo_1.8-12                  #>  [25] cachem_1.1.0                GenomicAlignments_1.41.0    #>  [27] lifecycle_1.0.4             iterators_1.0.14            #>  [29] pkgconfig_2.0.3             Matrix_1.7-0                #>  [31] R6_2.5.1                    fastmap_1.2.0               #>  [33] GenomeInfoDbData_1.2.13     clue_0.3-65                 #>  [35] digest_0.6.37               colorspace_2.1-1            #>  [37] TFMPvalue_0.0.9             AnnotationDbi_1.67.0        #>  [39] stabs_0.6-4                 textshaping_0.4.0           #>  [41] RSQLite_2.3.7               seqLogo_1.71.0              #>  [43] fansi_1.0.6                 httr_1.4.7                  #>  [45] abind_1.4-8                 compiler_4.4.1              #>  [47] bit64_4.5.2                 doParallel_1.0.17           #>  [49] BiocParallel_1.39.0         DBI_1.2.3                   #>  [51] highr_0.11                  R.utils_2.12.3              #>  [53] poweRlaw_0.80.0             DelayedArray_0.31.14        #>  [55] rjson_0.2.23                gtools_3.9.5                #>  [57] caTools_1.18.3              tools_4.4.1                 #>  [59] R.oo_1.26.0                 glue_1.8.0                  #>  [61] restfulr_0.0.15             cluster_2.1.6               #>  [63] reshape2_1.4.4              generics_0.1.3              #>  [65] gtable_0.3.5                tzdb_0.4.0                  #>  [67] R.methodsS3_1.8.2           sm_2.2-6.0                  #>  [69] hms_1.1.3                   utf8_1.2.4                  #>  [71] foreach_1.5.2               pillar_1.9.0                #>  [73] stringr_1.5.1               splines_4.4.1               #>  [75] dplyr_1.1.4                 lattice_0.22-6              #>  [77] survival_3.7-0              bit_4.5.0                   #>  [79] annotate_1.83.0             tidyselect_1.2.1            #>  [81] DirichletMultinomial_1.47.0 GO.db_3.20.0                #>  [83] vioplot_0.5.0               knitr_1.48                  #>  [85] bookdown_0.40               xfun_0.48                   #>  [87] stringi_1.8.4               UCSC.utils_1.1.0            #>  [89] yaml_2.3.10                 evaluate_1.0.0              #>  [91] codetools_0.2-20            tibble_3.2.1                #>  [93] BiocManager_1.30.25         cli_3.6.3                   #>  [95] xtable_1.8-4                systemfonts_1.1.0           #>  [97] munsell_0.5.1               jquerylib_0.1.4             #>  [99] Rcpp_1.0.13                 png_0.1-8                   #> [101] XML_3.99-0.17               parallel_4.4.1              #> [103] pkgdown_2.1.1.9000          ggplot2_3.5.1               #> [105] readr_2.1.5                 blob_1.2.4                  #> [107] bitops_1.0-9                glmnet_4.1-8                #> [109] pwalign_1.1.0               scales_1.3.0                #> [111] crayon_1.5.3                GetoptLong_1.0.5            #> [113] rlang_1.1.4                 KEGGREST_1.45.1"},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dania Machlab. Author. Lukas Burger. Author. Charlotte Soneson. Author. Dany Mukesha. Contributor. Michael Stadler. Author, maintainer.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Machlab D, Burger L, Soneson C, Rijli FM, Schübeler D, Stadler MB. monaLisa: R/Bioconductor package identifying regulatory motifs. Bioinformatics 38(9):2624-2625 (2022).","code":"@Article{,   title = {monaLisa: an R/Bioconductor package for identifying regulatory motifs},   author = {Dania Machlab and Lukas Burger and Charlotte Soneson and Filippo M Rijli and Dirk Schübeler and Michael B Stadler},   journal = {Bioinformatics},   volume = {38},   number = {9},   pages = {2624-2625},   year = {2022},   doi = {10.1093/bioinformatics/btac102}, }"},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Binned Motif Enrichment Analysis and Visualization","text":"monaLisa inspired father Homer look enriched motifs sets (bins) genomic regions, compared regions (“binned motif enrichment analysis”). uses known motifs representing transcription factor binding preferences, example JASPAR2020 Bioconductor package. regions example promoters accessible regions, grouped bins according numerical value assigned region, change expression accessibility. goal analysis identify transcription factors associated numerical value thus candidates drivers underlying biological process. addition “binned motif enrichment analysis”, monaLisa can also used address question using stability selection (form linear regression), look motif matches sequences. Current contributors include: Michael Stadler Dania Machlab Lukas Burger Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/monaLisa/index.html","id":"news","dir":"","previous_headings":"","what":"News","title":"Binned Motif Enrichment Analysis and Visualization","text":"information latest changes can found preprint available bioRxiv monaLisa available Bioconductor monaLisa now published Bioinformatics","code":""},{"path":"https://fmicompbio.github.io/monaLisa/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Binned Motif Enrichment Analysis and Visualization","text":"cite monaLisa please use publication found see citation(\"monaLisa\").","code":""},{"path":"https://fmicompbio.github.io/monaLisa/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Binned Motif Enrichment Analysis and Visualization","text":"monaLisa can installed Bioconductor via BiocManager package:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"monaLisa\")"},{"path":"https://fmicompbio.github.io/monaLisa/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"Binned Motif Enrichment Analysis and Visualization","text":"minimal example run monaLisa analysis: return value se SummarizedExperiment motifs rows bins columns, multiple assays significance magnitude enrichments. inputs calcBinnedMotifEnrR can easily obtained using Bioconductor packages: results can conveniently visualized:","code":"library(monaLisa)  mcparams <- BiocParallel::MulticoreParam(10L) se <- calcBinnedMotifEnrR(seqs = seqs,   # DNAStringSet (e.g. peak sequences)                           bins = bins,   # factor that groups 'seqs'                           pwmL = pwms, # PWMatrixList (know motifs)                           BPPARAM = mcparams,                           min.score = 10,                           verbose = TRUE) # get sequences ('atacPeaks' is a GRanges) library(Biostrings) library(BSgenome.Mmusculus.UCSC.mm10) seqs <- getSeq(BSgenome.Mmusculus.UCSC.mm10, atacPeaks)  # bin sequences ('atacPeaksChange' is a numerical vector) bins <- monaLisa::bin(x = atacPeaksChange, binmode = \"equalN\", nElement = 400)  # obtain known motifs from Jaspar library(JASPAR2020) library(TFBSTools) pwms <- getMatrixSet(JASPAR2020, list(matrixtype = \"PWM\", tax_group = \"vertebrates\")) plotBinDensity(atacPeaksChange, bins, legend = FALSE) plotMotifHeatmaps(se, cluster = TRUE,                   which.plots = c(\"enr\", \"FDR\"),                   show_seqlogo = TRUE)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/annoSeqlogo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence logo annotation — annoSeqlogo","title":"Sequence logo annotation — annoSeqlogo","text":"create annotation Heatmap   containing sequence logos.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/annoSeqlogo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence logo annotation — annoSeqlogo","text":"","code":"annoSeqlogo(   grobL,   which = c(\"column\", \"row\"),   space = unit(0.5, \"mm\"),   width = NULL,   height = NULL,   gp = gpar(fill = NA, col = NA) )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/annoSeqlogo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence logo annotation — annoSeqlogo","text":"grobL list sequence logo grobs, typically created using seqLogoGrob. Whether column annotation row annotation? space space around image annotation grid borders. value unit object. width Width annotation. value absolute unit. Width allowed set column annotation. height Height annotation. value absolute unit. Height allowed set row annotation. gp Graphic parameters annotation grids. Can used control background color annotation grids.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/annoSeqlogo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence logo annotation — annoSeqlogo","text":"annotation function can used   HeatmapAnnotation.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/annoSeqlogo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence logo annotation — annoSeqlogo","text":"","code":"if (require(JASPAR2020) && require(TFBSTools) && require(gridExtra)) {     pfm1 <- getMatrixByID(JASPAR2020, \"MA0139\")      g1 <- seqLogoGrob(pfm1)      anno <- annoSeqlogo(list(g1)) } #> Loading required package: JASPAR2020 #> Loading required package: TFBSTools #> Loading required package: gridExtra"},{"path":"https://fmicompbio.github.io/monaLisa/reference/bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin elements of x. — bin","title":"Bin elements of x. — bin","text":"bin groups elements x bins either   constant number elements per bin, constant bin width according   user-provided bin boundaries.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin elements of x. — bin","text":"","code":"bin(   x,   binmode = c(\"equalN\", \"equalWidth\", \"breaks\"),   nElements = round(length(x)/5),   nBins = NULL,   minAbsX = NULL,   breaks = NULL,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin elements of x. — bin","text":"x numerical vector values used binning. binmode algorithm used binning. Possible values : \"equalN\" (default), \"equalWidth\" \"breaks\" (see Details). nElements number elements per bin (binmode=\"equalN\"). width bins adjusted accordingly. nBins number bins (binmode=\"equalWidth\"). number elements per bin variable. minAbsX minimal absolute value x elements binned using binmode=\"equalN\" binmode=\"equalWidth\" (ignored values binmode). Elements x values [-minAbsX,minAbsX] collected single bin. breaks Numerical vector bin boundaries (binmode=\"breaks\"). breaks ordered strictly increasing, length (number bins) + 1. ... arguments passed cut(x, breaks, include.lowest = TRUE, ...), labels=FALSE.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin elements of x. — bin","text":"return value cut(x, ...), typically factor   length x. Binning mode, bin boundaries \"neutral\" bin   available attr(..., \"binmode\"), attr(..., \"breaks\")   attr(..., \"bin0\"). binmode = \"breaks\", latter   NA.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bin elements of x. — bin","text":"Elements binned according values x depending   binmode: equalN Items grouped variable   number bins nElements elements . minAbsX   NULL, elements x-values [-minAbsX,minAbsX]   first collected single bin binning remaining   elements. boundaries single bin may slightly adjusted   order respect nElements elements bins. equalWidth Items group nBins bins variable   number elements . breaks Items grouped bins using   cut(x, breaks, include.lowest = TRUE)","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin elements of x. — bin","text":"","code":"set.seed(1) x <- rnorm(100) summary(bin(x, \"equalN\", nElements=10)) #>    [-2.21,-1.05]   (-1.05,-0.614]  (-0.614,-0.375] (-0.375,-0.0767]  #>               10               10               10               10  #>  (-0.0767,0.114]    (0.114,0.377]    (0.377,0.581]    (0.581,0.771]  #>               10               10               10               10  #>     (0.771,1.18]       (1.18,2.4]  #>               10               10  summary(bin(x, \"equalN\", nElements=10, minAbsX=0.5)) #> Warning: Zero-bin breaks (-0.621,0.576] have been adjusted by more than 20% compared to `minAbsX` to best respect `binmode`. #> Please use `bin(..., binmode = \"breaks\", breaks = X)` and optionally `setZeroBin(...)` to enforce breaks as defined by `X`. #>  [-2.21,-1.09] (-1.09,-0.621] (-0.621,0.576]  (0.576,0.769]   (0.769,1.18]  #>             10             10             50             10             10  #>     (1.18,2.4]  #>             10  summary(bin(x, \"equalWidth\", nBins=5)) #>  [-2.21,-1.29] (-1.29,-0.368] (-0.368,0.555]   (0.555,1.48]     (1.48,2.4]  #>              6             24             36             28              6  summary(bin(x, \"breaks\", breaks=c(-10,-1,0,1,10))) #> [-10,-1]   (-1,0]    (0,1]   (1,10]  #>       11       35       39       15"},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedKmerEnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","title":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","text":"Given set sequences corresponding bins, identify   enriched k-mers (n-grams) bin. sequences can given either   directly genomic coordinates.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedKmerEnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","text":"","code":"calcBinnedKmerEnr(   seqs,   bins = NULL,   kmerLen = 5,   background = c(\"otherBins\", \"allBins\", \"zeroBin\", \"genome\", \"model\"),   MMorder = 1,   test = c(\"fisher\", \"binomial\"),   includeRevComp = TRUE,   maxFracN = 0.7,   maxKmerSize = 3L,   GCbreaks = c(0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.7, 0.8),   pseudocount.kmers = 1,   pseudocount.log2enr = 8,   p.adjust.method = \"BH\",   genome = NULL,   genome.regions = NULL,   genome.oversample = 2,   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedKmerEnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","text":"seqs DNAStringSet object sequences test bins factor length order seqs, indicating bin sequence. Typically return value bin. background = \"genome\" background = \"model\", bins can omitted. kmerLen numeric scalar giving k-mer length. background character scalar specifying background sequences use. One \"otherBins\" (default), \"allBins\", \"zeroBin\", \"genome\" \"model\" (see \"Details\"). MMorder numeric scalar giving order Markov model used calculate expected frequencies background = \"model\". test character scalar specifying type enrichment test perform. One \"fisher\" (default) \"binomial\". enrichment test one-sided (enriched foreground). includeRevComp logical scalar. TRUE (default), count k-mer occurrences seqs reverse-complement, concatenating seqs reverse-complemented versions counting. useful motifs can expected occur strand (e.g. DNA sequences ChIP-seq peaks). motifs expected forward strand (e.g. RNA sequences CLIP-seq peaks), includeRevComp = FALSE used. Note bins recycled reverse complemented sequences, means reverse-complemented sequence assigned bib corresponding forward sequence. maxFracN numeric scalar maximal fraction N bases allowed sequence (defaults 0.7). Sequences higher fractions excluded analysis. maxKmerSize maximum k-mer size consider, adjusting background sequence weights k-mer composition compared foreground sequences. default value (3) correct mono-, di- tri-mer composition. GCbreaks breaks GC bins. default value based hard-coded bins used Homer. pseudocount.kmers numeric scalar - added observed expected counts k-mer avoid zero values. pseudocount.log2enr numerical scalar pseudocount add foreground background counts calculating log2 motif enrichments p.adjust.method character scalar selecting p value adjustment method (used p.adjust). genome BSgenome DNAStringSet object genome sequence. used background = \"genome\" extracting background sequences. genome.regions optional GRanges object defining intervals genome background sequences sampled background = \"genome\". NULL, background sequences sampled randomly genome. genome.oversample numeric scalar least 1.0 defining many background sequences sampled per foreground sequence background = \"genome\". Larger values take longer improve sequence composition similarity foreground background (see \"Details\"). BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation. verbose logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedKmerEnr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","text":"SummarizedExperiment object   motifs rows bins columns, containing seven assays: negLog10P : -log10 P values negLog10Padj : -log10 adjusted P values pearsonResid : k-mer enrichments Pearson residuals expForegroundWgtWithHits : expected number foreground     sequences motif hits log2enr : k-mer enrichments log2 ratios sumForegroundWgtWithHits : Sum foreground sequence weights     bin k-mer occurrences sumBackgroundWgtWithHits : Sum background sequence weights     bin k-mer occurrences #' rowData object contains annotations (name, PFMs, PWMs GC fraction) k-mers, colData slot contains summary information bins.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedKmerEnr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","text":"function implements binned k-mer enrichment analysis.   enrichment analysis, sequences specific bin used foreground   sequences test k-mer enrichments comparing background sequences   (defined background, see ), similarly done motifs   calcBinnedMotifEnrR. Sequences weighted correct   GC shorter k-mer composition differences fore- background   sets. background sequences defined according value   background argument: otherBins : sequences bins (excluding current       bin) allBins : sequences bins (including current bin) zeroBin : sequences \"zero bin\", defined       maxAbsX argument bin. bins       define \"zero bin\", example created       bin(..., maxAbsX = NULL), selecting background definition       abort error. genome : sequences randomly sampled genome (      intervals defined genome.regions given).       foreground sequence, genome.oversample background sequences       size sampled (average). , one per       foreground sequence selected trying match G+C composition.       order make sampling deterministic, seed number needs       provided RNGseed parameter       SerialParam       MulticoreParam creating       BiocParallelParam instance BPPARAM. model : Markov model order MMorder estimated       foreground sequences used estimate expected k-mer       frequencies. K-mer enrichments calculated comparing observed       expected frequencies. order make process       deterministic, seed number needs provided       RNGseed parameter SerialParam       MulticoreParam creating       BiocParallelParam instance BPPARAM. k-mer, weights sequences multiplied number   k-mer occurrences sequence summed, separately foreground   (sumForegroundWgtWithHits) background   (sumBackgroundWgtWithHits) sequences. function works ZOOPS   (Zero--One-Per-Sequence) mode, one occurrence per   sequence counted, helps reduce impact sequence repeats.   total foreground (totalWgtForeground) background   (totalWgtBackground) sum sequence weights also calculated.   k-mer zero sumForegroundWgtWithHits   sumBackgroundWgtWithHits, values (p-values enrichment)   calculated using two numbers set NA. Two statistical tests calculation enrichment log p-value   available: test = \"fisher\" (default) perform Fisher's exact   tests, test = \"binomial\" perform binomial tests, using: fisher : fisher.test(x = tab, alternative =       \"greater\"), tab contingency table summed       weights sequences foreground background sets (rows),       without occurrences particular k-mer (columns). binomial : pbinom(q = sumForegroundWgtWithHits - 1, size =       totalWgtForeground,       prob = sumBackgroundWgtWithHits / totalWgtBackground,       lower.tail = FALSE, log.p = TRUE)","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedKmerEnr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate k-mer enrichment in bins of sequences. — calcBinnedKmerEnr","text":"","code":"seqs <- Biostrings::DNAStringSet(c(\"GCATGCATGC\", \"CATGCGCATG\")) bins <- factor(1:2) calcBinnedKmerEnr(seqs = seqs, bins = bins, kmerLen = 3) #> class: SummarizedExperiment  #> dim: 64 2  #> metadata(5): bins bins.binmode bins.breaks bins.bin0 param #> assays(7): negLog10P negLog10Padj ... sumForegroundWgtWithHits #>   sumBackgroundWgtWithHits #> rownames(64): AAA AAC ... TTG TTT #> rowData names(5): motif.id motif.name motif.pfm motif.pwm #>   motif.percentGC #> colnames(2): 1 2 #> colData names(6): bin.names bin.lower ... totalWgtForeground #>   totalWgtBackground"},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrHomer.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare and run HOMER motif enrichment analysis. — calcBinnedMotifEnrHomer","title":"Prepare and run HOMER motif enrichment analysis. — calcBinnedMotifEnrHomer","text":"Run complete HOMER motif enrichment analysis, consisting     calls prepareHomer, system2     parseHomerOutput. function requires HOMER     installed (see http://homer.ucsd.edu/homer/index.html)     path tool provided (homerfile argument).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrHomer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare and run HOMER motif enrichment analysis. — calcBinnedMotifEnrHomer","text":"","code":"calcBinnedMotifEnrHomer(   gr,   b,   genomedir,   outdir,   motifFile,   homerfile = findHomer(),   regionsize = \"given\",   pseudocount.log2enr = 8,   p.adjust.method = \"BH\",   Ncpu = 2L,   verbose = FALSE,   verbose.Homer = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrHomer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare and run HOMER motif enrichment analysis. — calcBinnedMotifEnrHomer","text":"gr GRanges object (object can coerced one) genomic regions analyze. b vector length gr groups elements bins (typically factor, one returned bin). genomedir Directory containing sequence files Fasta format (one per chromosome). outdir path specifying folder output files written. motifFile file HOMER formatted PWMs used enrichment analysis. homerfile Path file name findMotifsGenome.pl HOMER script. regionsize peak size use HOMER (\"given\" keeps coordinate region, integer value keep many bases region center). pseudocount.log2enr numerical scalar pseudocount add foreground background counts calculating log2 motif enrichments p.adjust.method character scalar selecting p value adjustment method (used p.adjust). Ncpu Number parallel threads HOMER can use. verbose logical scalar. TRUE, print progress messages. verbose.Homer logical scalar. TRUE, print console output running Homer.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrHomer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare and run HOMER motif enrichment analysis. — calcBinnedMotifEnrHomer","text":"SummarizedExperiment object motifs rows bins   columns, containing seven assays: negLog10P : -log10 P values negLog10Padj : -log10 adjusted P values pearsonResid : motif enrichments Pearson residuals expForegroundWgtWithHits : expected number foreground     sequences motif hits log2enr : motif enrichments log2 ratios sumForegroundWgtWithHits : Sum foreground sequence weights     bin motif hits sumBackgroundWgtWithHits : Sum background sequence weights     bin motif hits rowData object contains annotations (name, PFMs, PWMs GC fraction) motifs, colData slot contains summary information bins.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrHomer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare and run HOMER motif enrichment analysis. — calcBinnedMotifEnrHomer","text":"","code":"if (!is.na(findHomer())){    # genome   genome <-  system.file(\"extdata\", \"exampleGenome.fa\", package = \"monaLisa\")    # create motif file for Homer   motiffile <- tempfile()   motifIDs <- c(\"MA0139.1\", \"MA1102.1\", \"MA0740.1\")   dumpJaspar(filename = motiffile, pkg = \"JASPAR2020\",              opts = list(ID = motifIDs))    # GRanges of regions used in binned motif enrichment analysis   gr <- GenomicRanges::tileGenome(       seqlengths = c(chr1 = 10000L, chr2 = 10000L, chr3 = 10000L),       tilewidth = 200, cut.last.tile.in.chrom = TRUE)    # create bins (motif enrichment analysis will be per bin)   bins <- factor(GenomicRanges::seqnames(gr))   table(bins)    # run calcBinnedMotifEnrHomer   outdir <- tempfile()   se <- calcBinnedMotifEnrHomer(gr = gr, b = bins, genomedir = genome,       outdir = outdir, motifFile = motiffile)   list.files(outdir)    }"},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrR.html","id":null,"dir":"Reference","previous_headings":"","what":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","title":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","text":"function performs motif enrichment analysis bins   sequences. bin, sequences bins used   background.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","text":"","code":"calcBinnedMotifEnrR(   seqs,   bins = NULL,   pwmL = NULL,   background = c(\"otherBins\", \"allBins\", \"zeroBin\", \"genome\"),   test = c(\"fisher\", \"binomial\"),   maxFracN = 0.7,   maxKmerSize = 3L,   min.score = 10,   matchMethod = \"matchPWM\",   GCbreaks = c(0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.7, 0.8),   pseudocount.log2enr = 8,   p.adjust.method = \"BH\",   genome = NULL,   genome.regions = NULL,   genome.oversample = 2,   BPPARAM = SerialParam(),   verbose = FALSE,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","text":"seqs DNAStringSet object sequences test bins factor length order seqs, indicating bin sequence. Typically return value bin. background = \"genome\", bins can omitted. pwmL PWMatrixList motifs calculate enrichments. background character scalar specifying background sequences use. One \"otherBins\" (default), \"allBins\", \"zeroBin\" \"genome\" (see \"Details\"). test character scalar specifying type enrichment test perform. One \"fisher\" (default) \"binomial\". enrichment test one-sided (enriched foreground). maxFracN numeric scalar maximal fraction N bases allowed sequence (defaults 0.7). Sequences higher fractions excluded analysis. maxKmerSize maximum k-mer size consider, adjusting background sequence weights k-mer composition compared foreground sequences. default value (3) correct mono-, di- tri-mer composition. min.score minimal score motif hits, used findMotifHits. matchMethod method used scan motif hits, passed method parameter findMotifHits. GCbreaks breaks GC bins. default value based hard-coded bins used Homer. pseudocount.log2enr numerical scalar pseudocount add foreground background counts calculating log2 motif enrichments p.adjust.method character scalar selecting p value adjustment method (used p.adjust). genome BSgenome DNAStringSet object genome sequence. used background = \"genome\" extracting background sequences. genome.regions optional GRanges object defining intervals genome background sequences sampled background = \"genome\". NULL, background sequences sampled randomly genome. genome.oversample numeric scalar least 1.0 defining many background sequences sampled per foreground sequence background = \"genome\". Larger values take longer improve sequence composition similarity foreground background (see \"Details\"). BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation. verbose logical scalar. TRUE, print progress messages. ... Additional arguments  findMotifHits.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","text":"SummarizedExperiment object   motifs rows bins columns, containing seven assays: negLog10P : -log10 P values negLog10Padj : -log10 adjusted P values pearsonResid : motif enrichments Pearson residuals expForegroundWgtWithHits : expected number foreground     sequences motif hits log2enr : motif enrichments log2 ratios sumForegroundWgtWithHits : Sum foreground sequence weights     bin motif hits sumBackgroundWgtWithHits : Sum background sequence weights     bin motif hits rowData object contains annotations (name, PFMs, PWMs GC fraction) motifs, colData slot contains summary information bins.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","text":"function implements binned motif enrichment analysis.   enrichment analysis, sequences specific bin used foreground   sequences test motif enrichments comparing background sequences   (defined background, see ). logic follows   findMotifsGenome.pl tool Homer version 4.11,   -size given -nomotif -mknown additionally -h using   test = \"fisher\", gives similar results.   Homer tool, sequences weighted correct GC k-mer   composition differences fore- background sets. background sequences defined according value   background argument: otherBins : sequences bins (excluding current       bin) allBins : sequences bins (including current bin) zeroBin : sequences \"zero bin\", defined       maxAbsX argument bin. bins       define \"zero bin\", example created       bin(..., maxAbsX = NULL), selecting background definition       abort error. genome : sequences randomly sampled genome (      intervals defined genome.regions given).       foreground sequence, genome.oversample background sequences       size sampled (average). , one per       foreground sequence selected trying match G+C composition.       order make sampling deterministic, seed number needs       provided RNGseed parameter       SerialParam       MulticoreParam creating       BiocParallelParam instance BPPARAM. Motif hits predicted using findMotifHits   multiple hits per sequence counted just one hit (ZOOPS mode).   motif, weights sequences hit summed separately   foreground (sumForegroundWgtWithHits) background   (sumBackgroundWgtWithHits). total foreground   (totalWgtForeground) background (totalWgtBackground)   sum sequence weights also calculated. motif zero   sumForegroundWgtWithHits sumBackgroundWgtWithHits,   values (p-values enrichment) calculated using   two numbers set NA. Two statistical tests calculation enrichment log p-value   available: test = \"fisher\" (default) perform Fisher's exact   tests, test = \"binomial\" perform binomial tests   (default Homer), using: fisher : fisher.test(x = tab, alternative =       \"greater\"), tab contingency table summed       weights sequences foreground background sets (rows),       without hit particular motif (columns). binomial : pbinom(q = sumForegroundWgtWithHits - 1, size =       totalWgtForeground,       prob = sumBackgroundWgtWithHits / totalWgtBackground,       lower.tail = FALSE, log.p = TRUE)","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/calcBinnedMotifEnrR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binned Motif Enrichment Analysis with monaLisa — calcBinnedMotifEnrR","text":"","code":"seqs <- Biostrings::DNAStringSet(c(\"GTCAGTCGATC\", \"CAGTCTAGCTG\",                                    \"CGATCGTCAGT\", \"AGCTGCAGTCT\")) bins <- factor(rep(1:2, each = 2)) m <- rbind(A = c(2, 0, 0),            C = c(1, 1, 0),            G = c(0, 2, 0),            T = c(0, 0, 3)) pwms <- TFBSTools::PWMatrixList(     TFBSTools::PWMatrix(ID = \"m1\", profileMatrix = m),     TFBSTools::PWMatrix(ID = \"m2\", profileMatrix = m[, 3:1]) ) calcBinnedMotifEnrR(seqs = seqs, bins = bins, pwmL = pwms,                     min.score = 3) #> class: SummarizedExperiment  #> dim: 2 2  #> metadata(5): bins bins.binmode bins.breaks bins.bin0 param #> assays(7): negLog10P negLog10Padj ... sumForegroundWgtWithHits #>   sumBackgroundWgtWithHits #> rownames(2): m1 m2 #> rowData names(5): motif.id motif.name motif.pfm motif.pwm #>   motif.percentGC #> colnames(2): 1 2 #> colData names(6): bin.names bin.lower ... totalWgtForeground #>   totalWgtBackground"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcKmerEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate k-mer enrichment — .calcKmerEnrichment","title":"Calculate k-mer enrichment — .calcKmerEnrichment","text":"Given sequences, foreground/background labels   weights, calculate enrichment k-mer   foreground compared background. function called   calcBinnedKmerEnr() bin background != \"model\". default type test \"fisher\".   Alternatively, binomial test can used test = \"binomial\".   Using Fisher's exact test advantage special cases   zero background counts handled without ad-hoc adjustments   k-mer frequencies. test = \"fisher\", fisher.test used   alternative = \"greater\", making one-sided test enrichment,   case binomial test.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcKmerEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate k-mer enrichment — .calcKmerEnrichment","text":"","code":".calcKmerEnrichment(k, df, test = c(\"fisher\", \"binomial\"), verbose = FALSE)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcKmerEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate k-mer enrichment — .calcKmerEnrichment","text":"k Numeric scalar giving length k-mers analyze. df DataFrame sequence information returned .iterativeNormForKmers(). test type motif enrichment test perform. verbose logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcKmerEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate k-mer enrichment — .calcKmerEnrichment","text":"data.frame containing motifs rows columns: motifName : motif name logP : log p-value enrichment (natural logarithm).        test=\"binomial\" (default), log p-value identical        one returned Homer. sumForegroundWgtWithHits : weighted number k-mer hits        foreground sequences. sumBackgroundWgtWithHits : weighted number k-mer hits        background sequences. totalWgtForeground : total sum weights foreground        sequences. totalWgtBackground : total sum weights background        sequences.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcKmerEnrichment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate k-mer enrichment — .calcKmerEnrichment","text":"function works ZOOPS mode, means one   zero occurrences k-mer considered per sequence. helpful   reduce impact simple sequence repeats occurring sequences.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcMotifEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate motif enrichment — .calcMotifEnrichment","title":"Calculate motif enrichment — .calcMotifEnrichment","text":"Given motif counts, foreground/background labels   weights set sequences, calculate enrichment motif   foreground compared background. function called   calcBinnedMotifEnrR() bin. default type test \"fisher\", also   Homer uses \"-h\" specified hypergeometric test.   Alternatively, binomial test can used test = \"binomial\"   (Homer default). Using Fisher's exact test   advantage special cases zero background counts   handled without ad-hoc adjustments frequencies. test = \"fisher\", fisher.test used   alternative = \"greater\", making one-sided test enrichment,   case binomial test.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcMotifEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate motif enrichment — .calcMotifEnrichment","text":"","code":".calcMotifEnrichment(   motifHitMatrix,   df,   test = c(\"fisher\", \"binomial\"),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcMotifEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate motif enrichment — .calcMotifEnrichment","text":"motifHitMatrix matrix 0 1 entries absence presence motif hits sequence. df DataFrame sequence information returned .iterativeNormForKmers(). test type motif enrichment test perform. verbose logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calcMotifEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate motif enrichment — .calcMotifEnrichment","text":"data.frame containing motifs rows columns: motifName : motif name logP : log p-value enrichment (natural logarithm).        test=\"binomial\" (default), log p-value identical        one returned Homer. sumForegroundWgtWithHits : sum weights        foreground sequences least one instance specific        motif (ZOOPS mode). sumBackgroundWgtWithHits : sum weights        background sequences least one instance specific        motif (ZOOPS mode). totalWgtForeground : total sum weights foreground        sequences. totalWgtBackground : total sum weights background        sequences.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calculateGCweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Get background sequence weights for GC bins — .calculateGCweight","title":"Get background sequence weights for GC bins — .calculateGCweight","text":"logic based Homer (version 4.11). sequences   binned depending GC content (GCbreaks). numbers   foreground background sequences bin counted, weights   background sequences bin defined :   weight_i = (number_fg_seqs_i / number_bg_seqs_i) * (number_bg_seqs_total /   number_fg_seqs_total)","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calculateGCweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get background sequence weights for GC bins — .calculateGCweight","text":"","code":".calculateGCweight(   df,   GCbreaks = c(0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.7, 0.8),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calculateGCweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get background sequence weights for GC bins — .calculateGCweight","text":"df DataFrame sequence information. GCbreaks breaks GC bins. default value based hard-coded bins used Homer. verbose logical scalar. TRUE, report GC weight calculation.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-calculateGCweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get background sequence weights for GC bins — .calculateGCweight","text":"DataFrame dimensions input df,   columns GCfrac, GCbin GCwgt   filled sequence GC content, assigned GC bins weights   correct differences GC distributions foreground background   sequences.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkDfValidity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if seqinfo DataFrame is valid — .checkDfValidity","title":"Check if seqinfo DataFrame is valid — .checkDfValidity","text":"Check DataFrame sequence information valid,   .e. correct object type (DataFrame) expected   columns attributes.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkDfValidity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if seqinfo DataFrame is valid — .checkDfValidity","text":"","code":".checkDfValidity(df)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkDfValidity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if seqinfo DataFrame is valid — .checkDfValidity","text":"df Input object checked. attribute err columns: seqs : DNAStringSet object. isForeground indicates sequence                               foreground group. GCfrac : fraction G+C bases per sequence. GCbin : GC bin sequence. GCwgt : sequence weight adjust GC     differences foreground background sequences. seqWgt : sequence weight adjust k-mer     differences foreground background sequences.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkDfValidity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if seqinfo DataFrame is valid — .checkDfValidity","text":"TRUE (invisibly) df valid, otherwise   raises exception using stop()","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkIfSeqsAreEqualLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if elements of `x` are have equal lengths — .checkIfSeqsAreEqualLength","title":"Check if elements of `x` are have equal lengths — .checkIfSeqsAreEqualLength","text":"Check elements `x` equally long.   , generate warning.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkIfSeqsAreEqualLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if elements of `x` are have equal lengths — .checkIfSeqsAreEqualLength","text":"","code":".checkIfSeqsAreEqualLength(x)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkIfSeqsAreEqualLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if elements of `x` are have equal lengths — .checkIfSeqsAreEqualLength","text":"x object implements width method, typically GRanges DNAStringSet object.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-checkIfSeqsAreEqualLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if elements of `x` are have equal lengths — .checkIfSeqsAreEqualLength","text":"NULL (invisibly). function called side-effect   generating warning elements input equal lengths.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-cons2matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrix from consensus sequence — .cons2matrix","title":"Create matrix from consensus sequence — .cons2matrix","text":"Given nucleotide sequence ,C,G,T letter corresponding   motif's consensus string, construct positional frequency matrix.   matrix can example used profileMatrix argument   constructor TFBSTools::PFMatrix object.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-cons2matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrix from consensus sequence — .cons2matrix","text":"","code":".cons2matrix(x, n = 100L)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-cons2matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrix from consensus sequence — .cons2matrix","text":"x Character scalar motif consensus sequence. n Integer scalar giving columns sums constructed matrix (number observed bases position).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-cons2matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create matrix from consensus sequence — .cons2matrix","text":"positional frequency matrix.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-defineBackground.html","id":null,"dir":"Reference","previous_headings":"","what":"Define background sequence set for a single motif enrichment calculation — .defineBackground","title":"Define background sequence set for a single motif enrichment calculation — .defineBackground","text":"Define background set motif enrichment calculation   single bin, depending background mode given foreground   sequences.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-defineBackground.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define background sequence set for a single motif enrichment calculation — .defineBackground","text":"","code":".defineBackground(   sqs,   bns,   bg,   currbn,   gnm,   gnm.regions,   gnm.oversample,   maxFracN = 0.7,   GCbreaks = c(0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.7, 0.8) )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-defineBackground.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define background sequence set for a single motif enrichment calculation — .defineBackground","text":"sqs, bns, bg seqs, bins background arguments calcBinnedMotifEnrR. currbn integer scalar current bin defining foreground sequences. gnm, gnm.regions, gnm.oversample genome, genome.regions genome.oversample arguments calcBinnedMotifEnrR. maxFracN maxFracN argument calcBinnedMotifEnrR. GCbreaks breaks GC bins. default value based hard-coded bins used Homer.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-defineBackground.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define background sequence set for a single motif enrichment calculation — .defineBackground","text":"DataFrame sequences represented rows columns   seqs, isForeground, GCfrac, GCbin, GCwgt   seqWgt. first three already filled .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-filterSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Sequences — .filterSeqs","title":"Filter Sequences — .filterSeqs","text":"Filter sequences unlikely useful motif   enrichment analysis. current defaults based HOMER   (version 4.11).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-filterSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Sequences — .filterSeqs","text":"","code":".filterSeqs(   seqs,   maxFracN = 0.7,   minLength = 5L,   maxLength = 100000L,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-filterSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Sequences — .filterSeqs","text":"seqs DNAStringSet object. maxFracN numeric scalar maximal fraction N bases allowed sequence (defaults 0.7). minLength minimum sequence length (default Homer). Sequences shorter filtered . maxLength maximum sequence length (default Homer). Sequences bigger filtered . verbose logical scalar. TRUE, report filtering.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-filterSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Sequences — .filterSeqs","text":"logical vector length seqs TRUE   indicated keep sequence FALSE filter .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-filterSeqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Sequences — .filterSeqs","text":"filtering logic based removePoorSeq.pl Homer.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-glmnetRandomizedLasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomized Lasso — .glmnetRandomizedLasso","title":"Randomized Lasso — .glmnetRandomizedLasso","text":"function performs randomized lasso using glmnet     package. function present stabs package runs     lasso version adapted randomized lasso . Randomized     lasso stability selection uses function repeatedly     select predictors.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-glmnetRandomizedLasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomized Lasso — .glmnetRandomizedLasso","text":"","code":".glmnetRandomizedLasso(   x,   y,   q,   weakness = 1,   type = c(\"conservative\", \"anticonservative\"),   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-glmnetRandomizedLasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomized Lasso — .glmnetRandomizedLasso","text":"x predictor matrix. Passed x glmnet.lasso stabs package. y response vector. Passed y glmnet.lasso stabs package. q number variables selected subsample. Passed q glmnet.lasso stabs package. weakness weakness parameter used randomized lasso (see details). type parameter passed type glmnet.lasso stabs package. character vector specifying much PFER controlled. type \"conservative\" (default), number selected variables per subsample <= q. type \"anticonservative\" number selected variables per subsample >= q. ... additional parameters glmnet.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-glmnetRandomizedLasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomized Lasso — .glmnetRandomizedLasso","text":"regression output consists list length 2.     list contains following: selected - logical vector length equal total number         predictors. predictors chosen value TRUE. path - logical matrix containing regularization steps         columns predictors rows. entry TRUE indicates         selection.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-glmnetRandomizedLasso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomized Lasso — .glmnetRandomizedLasso","text":"function identical glmnet.lasso     stabs package. addition/modification weakness     parameter added calling     glmnet function setting     penalty.factor = 1/runif(ncol(x), weakness, 1),     ncol(x) number predictors.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-iterativeNormForKmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust for k-mer composition (multiple iterations) — .iterativeNormForKmers","title":"Adjust for k-mer composition (multiple iterations) — .iterativeNormForKmers","text":"run `.normForKmers` multiple times converge   final weights used correct background   sequences k-mer composition differences compared foreground.   closely follow HOMER's normalizeSequence() function found   Motif2.cpp. Note HOMER runs   normalizeSequence() one last time going iterations   reaching low error, .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-iterativeNormForKmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust for k-mer composition (multiple iterations) — .iterativeNormForKmers","text":"","code":".iterativeNormForKmers(   df,   maxKmerSize = 3L,   minSeqWgt = 0.001,   maxIter = 160L,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-iterativeNormForKmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust for k-mer composition (multiple iterations) — .iterativeNormForKmers","text":"df DataFrame sequence information returned .calculateGCweight. maxKmerSize Integer scalar giving maximum k-mer size consider. default set 3 (like HOMER), meaning k-mers size 1, 2 3 considered. minSeqWgt Numeric scalar greater zero giving minimal weight sequence. default value (0.001) also used HOMER (HOMER_MINIMUM_SEQ_WEIGHT  constant Motif2.h). maxIter integer scalar giving maximum number times run .normForKmers. default set 160 (HOMER). verbose logical scalar. TRUE, report k-mer composition adjustment.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-iterativeNormForKmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust for k-mer composition (multiple iterations) — .iterativeNormForKmers","text":"DataFrame containing: sequenceWeights :   dataframe containing sequence GC content, GC bins   assigned , weight correct GC differences foreGround   background sequences, weight adjust kmer composition,   error term sequenceNucleotides : DNAStringSet   object containing raw sequences","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-normForKmers.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust for k-mer composition (single iteration) — .normForKmers","title":"Adjust for k-mer composition (single iteration) — .normForKmers","text":"Adjust background sequence weights differences k-mer   composition compared foreground sequences. function   implements single iteration, called iteratively   .iterativeNormForKmers get final set adjusted   weights, result adjusting GC k-mer   composition. logic based Homer's   normalizeSequenceIteration() function found Motif2.cpp.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-normForKmers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust for k-mer composition (single iteration) — .normForKmers","text":"","code":".normForKmers(   kmerFreq,   goodKmers,   kmerRC,   seqWgt,   isForeground,   minSeqWgt = 0.001,   maxSeqWgt = 1000 )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-normForKmers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust for k-mer composition (single iteration) — .normForKmers","text":"kmerFreq list matrices. matrix index list contains probability k-mers length , k-mer (columns) sequence (rows). goodKmers list numeric vectors; element index contains number good (non-N-containing) k-mers length sequence. kmerRC list character vectors; element index contains reverse complement sequences k-mers length . seqWgt numeric vector starting sequence weights beginning iteration. isForeground logical vector length seqs. TRUE indicates sequence foreground, FALSE background sequence. minSeqWgt Numeric scalar greater zero giving minimal weight sequence. default value (0.001) based Homer (HOMER_MINIMUM_SEQ_WEIGHT constant Motif2.h). maxSeqWgt Numeric scalar greater zero giving maximal weight sequence. default value (1000) based HOMER (1 / HOMER_MINIMUM_SEQ_WEIGHT constant Motif2.h).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dot-normForKmers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust for k-mer composition (single iteration) — .normForKmers","text":"named list elements seqWgt (updated   weights) err (error measuring difference foreground   weighted background sequence compositions).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dumpJaspar.html","id":null,"dir":"Reference","previous_headings":"","what":"Dump Jaspar motifs into a HOMER motif file. — dumpJaspar","title":"Dump Jaspar motifs into a HOMER motif file. — dumpJaspar","text":"Get motifs Jaspar database package (e.g.     JASPAR2020) write HOMER-compatible motif file     positional probability matrices.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dumpJaspar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dump Jaspar motifs into a HOMER motif file. — dumpJaspar","text":"","code":"dumpJaspar(   filename,   pkg = \"JASPAR2020\",   opts = list(tax_group = \"vertebrates\"),   pseudocount = 1,   relScoreCutoff = 0.8,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/dumpJaspar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dump Jaspar motifs into a HOMER motif file. — dumpJaspar","text":"filename Name output file created. pkg Name Jaspar package use (default: JASPAR2020). opts list search options used getMatrixSet. default, vertebrate motifs included output using opts = list(tax_group = \"vertebrates\"). pseudocount numerical scalar pseudocount added element position frequency matrix extracted Jaspar, conversion position probability matrix (default: 1.0). relScoreCutoff Currently ignored. numeric(1) [0,1] sets default motif log-odds score cutof relScoreCutoff * maximal score PWM (default: 0.8). verbose logical scalar. TRUE, print progress messages.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/dumpJaspar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dump Jaspar motifs into a HOMER motif file. — dumpJaspar","text":"TRUE successful.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/dumpJaspar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dump Jaspar motifs into a HOMER motif file. — dumpJaspar","text":"","code":"dumpJaspar(filename = tempfile(), pkg = \"JASPAR2020\",            opts = list(ID = c(\"MA0006.1\"))) #> [1] TRUE"},{"path":"https://fmicompbio.github.io/monaLisa/reference/findHomer.html","id":null,"dir":"Reference","previous_headings":"","what":"Find HOMER script file. — findHomer","title":"Find HOMER script file. — findHomer","text":"Find absolute path HOMER script file.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findHomer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find HOMER script file. — findHomer","text":"","code":"findHomer(homerfile = \"findMotifsGenome.pl\", dirs = NULL)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/findHomer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find HOMER script file. — findHomer","text":"homerfile Name script file search. dirs Directory names look homerfile. dirs=NULL, directories listed PATH environment variable searched.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findHomer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find HOMER script file. — findHomer","text":"Absolute path homerfile, NA none several   found.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findHomer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find HOMER script file. — findHomer","text":"addition dirs, findHomer also look     directory provided environment variable MONALISA_HOMER.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findHomer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find HOMER script file. — findHomer","text":"","code":"homer_path <- findHomer()"},{"path":"https://fmicompbio.github.io/monaLisa/reference/findMotifHits-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Find motif matches in sequences. — findMotifHits","title":"Find motif matches in sequences. — findMotifHits","text":"findMotifHits scans sequences (either provided file, R object genomic coordinates)  matches positional weight matrices (provided file R objects)","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findMotifHits-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find motif matches in sequences. — findMotifHits","text":"","code":"findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'character,character' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'character,DNAString' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'character,DNAStringSet' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrix,character' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrix,DNAString' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrix,DNAStringSet' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrixList,character' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrixList,DNAString' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrixList,DNAStringSet' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrix,GRanges' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )  # S4 method for class 'PWMatrixList,GRanges' findMotifHits(   query,   subject,   min.score,   method = c(\"matchPWM\", \"homer2\"),   homerfile = findHomer(\"homer2\"),   BPPARAM = SerialParam(),   genome = NULL )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/findMotifHits-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find motif matches in sequences. — findMotifHits","text":"query motifs search , either character(1) path file name motif           file PWM HOMER format (currently           supported method=\"homer2\") PWMatrix single PWM PWMatrixList several PWMs search . subject sequences searched, either character path file name sequence           file DNA sequences FASTA format DNAString single sequence DNAStringSet several sequences GRanges object genomic coordinates         sequences searched. min.score minimum score counting match. Can given character string containing percentage (e.g. \"85 highest possible score single number. method internal method use motif searching. One \"matchPWM\" using Biostrings::matchPWM (optimized) \"homer2\" call homer2 binary Please note two methods might give slightly different results (see details). homerfile Path file name homer2 binary. BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation. genome BSgenome object reference genome subject. argument set NULL default used function subject GRanges object. necessary specify genome function can internally convert genomic regions DNAStringSet object.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findMotifHits-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find motif matches in sequences. — findMotifHits","text":"GRanges object matches query     subject.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findMotifHits-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find motif matches in sequences. — findMotifHits","text":"implemented methods (matchPWM homer2)     convenience (method=\"matchPWM\" calls     Biostrings::matchPWM internally optimized fashion,     method = \"homer2\" calls command line tool Homer     therefore requires installation Homer). general, running findMotifHits parameters using     methods generates identical results. minor differences     occur result rounding errors necessary     conversion PWMs (log2-odd scores) probability matrices needed     Homer, conversion scores natural log scale     used Homer. conversions implemented transparently     user, arguments findMotifHits     adjusted (e.g. PWMs always contain log2-odd scores,     min.score always log2 scale). bases frequencies less 0.001 motif, Homer     set 0.001 adjust frequencies motif     position accordingly sum 1.0. may differ     adjustment used scanning PWM matchPWM (e.g.     pseudocounts argument toPWM     function), thus can give rise differences reported motif hits     hit scores (typically low-scoring hits).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/findMotifHits-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find motif matches in sequences. — findMotifHits","text":"","code":"seqs <- Biostrings::DNAStringSet(c(s1 = \"GTCAGTCGATC\", s2 = \"CAGTCTAGCTG\",                                    s3 = \"CGATCGTCAGT\", s4 = \"AGCTGCAGTCT\")) m <- rbind(A = c(2, 0, 0),            C = c(1, 1, 0),            G = c(0, 2, 0),            T = c(0, 0, 3)) pwms <- TFBSTools::PWMatrixList(     TFBSTools::PWMatrix(ID = \"m1\", profileMatrix = m),     TFBSTools::PWMatrix(ID = \"m2\", profileMatrix = m[, 3:1]) ) findMotifHits(pwms, seqs, min.score = 7) #> GRanges object with 6 ranges and 4 metadata columns: #>       seqnames    ranges strand |     matchedSeq pwmid pwmname     score #>          <Rle> <IRanges>  <Rle> | <DNAStringSet> <Rle>   <Rle> <numeric> #>   [1]       s1       4-6      + |            AGT    m1 Unknown         7 #>   [2]       s1       2-4      - |            TGA    m2 Unknown         7 #>   [3]       s2       2-4      + |            AGT    m1 Unknown         7 #>   [4]       s3      9-11      + |            AGT    m1 Unknown         7 #>   [5]       s3       7-9      - |            TGA    m2 Unknown         7 #>   [6]       s4       7-9      + |            AGT    m1 Unknown         7 #>   ------- #>   seqinfo: 4 sequences from an unspecified genome"},{"path":"https://fmicompbio.github.io/monaLisa/reference/getColsByBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get colors by bin. — getColsByBin","title":"Get colors by bin. — getColsByBin","text":"Get colors elements according bin.     Colors assigned bins forming gradient col1     col2 order levels{b}. col0 assigned     neutral bin (attribute \"\") available.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getColsByBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get colors by bin. — getColsByBin","text":"","code":"getColsByBin(   b,   col1 = c(\"#003C30\", \"#01665E\", \"#35978F\", \"#80CDC1\", \"#C7EAE5\"),   col2 = c(\"#F6E8C3\", \"#DFC27D\", \"#BF812D\", \"#8C510A\", \"#543005\"),   col0 = \"#F5F5F5\" )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/getColsByBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get colors by bin. — getColsByBin","text":"b factor groups elements bins (typically output bin). col1 First color. col2 Second color. col0 Neutral color.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getColsByBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get colors by bin. — getColsByBin","text":"character vector colors elements b.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/getColsByBin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get colors by bin. — getColsByBin","text":"","code":"set.seed(1) x <- rnorm(100) b <- bin(x, \"equalN\", nElements = 10) cols <- getColsByBin(b)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/getKmerFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate observed and expected k-mer frequencies — getKmerFreq","title":"Calculate observed and expected k-mer frequencies — getKmerFreq","text":"Given set sequences, calculate observed expected k-mer   frequencies. Expected frequencies based Markov model order   MMorder.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getKmerFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate observed and expected k-mer frequencies — getKmerFreq","text":"","code":"getKmerFreq(   seqs,   kmerLen = 5,   MMorder = 1,   pseudocount = 1,   zoops = TRUE,   strata = rep(1L, length(seqs)),   p.adjust.method = \"BH\",   includeRevComp = TRUE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/getKmerFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate observed and expected k-mer frequencies — getKmerFreq","text":"seqs Set sequences, either character vector DNAStringSet. kmerLen numeric scalar giving k-mer length. MMorder numeric scalar giving order Markov model used calculate expected frequencies. pseudocount numeric scalar - added observed counts k-mer avoid zero values. zoops logical scalar. TRUE (default), one zero occurences k-mer considered per sequence. strata factor numeric scalar defining strata sequences. separate Markov model expected k-mer frequencies estimated set sequences stratum (level strata factor). strata scalar value, interpreted number strata split sequences according CpG observed--expected counts using kmeans(CpGoe, centers = strata). p.adjust.method character scalar selecting p value adjustment method (used p.adjust). includeRevComp logical scalar. TRUE (default), count k-mer occurrences seqs reverse-complement, concatenating seqs reverse-complemented versions counting. useful motifs can expected occur strand (e.g. DNA sequences ChIP-seq peaks). motifs expected forward strand (e.g. RNA sequences CLIP-seq peaks), includeRevComp = FALSE used. Note strata vector length seqs, reverse-complemented sequence assigned stratum forward sequence.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getKmerFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate observed and expected k-mer frequencies — getKmerFreq","text":"list observed expected k-mer frequencies   (freq.obs freq.exp, respectively), enrichment   statistics k-mer.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getKmerFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate observed and expected k-mer frequencies — getKmerFreq","text":"","code":"res <- getKmerFreq(seqs = c(\"AAAAATT\", \"AAATTTT\"), kmerLen = 3) names(res) #>  [1] \"freq.obs\"    \"freq.exp\"    \"log2enr\"     \"sqrtDelta\"   \"z\"           #>  [6] \"p\"           \"padj\"        \"strata\"      \"freq.strata\" \"CpGoe\"       head(res$freq.obs) #> AAA AAC AAG AAT ACA ACC  #>   3   0   0   4   0   0  head(res$freq.exp) #>       AAA       AAC       AAG       AAT       ACA       ACC  #> 1.8295455 0.1663223 0.1663223 1.4969008 0.3326446 0.3326446"},{"path":"https://fmicompbio.github.io/monaLisa/reference/getSetZeroBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set the zero bin manually — getSetZeroBin","title":"Get and set the zero bin manually — getSetZeroBin","text":"Get set zero bin manually","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getSetZeroBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set the zero bin manually — getSetZeroBin","text":"","code":"getZeroBin(bins)  setZeroBin(bins, zeroBin)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/getSetZeroBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set the zero bin manually — getSetZeroBin","text":"bins Factor, typically return value bin. zeroBin Numeric character scalar indicating level use zero bin, NA.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getSetZeroBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set the zero bin manually — getSetZeroBin","text":"getZeroBin, index level representing zero bin. setZeroBin, modified factor zero bin set provided value.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/getSetZeroBin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set the zero bin manually — getSetZeroBin","text":"","code":"set.seed(1) x <- rnorm(100) bins <- bin(x, \"equalN\", nElements = 10, minAbsX = 0.5) #> Warning: Zero-bin breaks (-0.621,0.576] have been adjusted by more than 20% compared to `minAbsX` to best respect `binmode`. #> Please use `bin(..., binmode = \"breaks\", breaks = X)` and optionally `setZeroBin(...)` to enforce breaks as defined by `X`. getZeroBin(bins) #> [1] 3 bins <- setZeroBin(bins, 2)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/homerToPFMatrixList.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a HOMER motif file and create a PFMatrixList — homerToPFMatrixList","title":"Read a HOMER motif file and create a PFMatrixList — homerToPFMatrixList","text":"Read motifs file HOMER format create     PFMatrixList .","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/homerToPFMatrixList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a HOMER motif file and create a PFMatrixList — homerToPFMatrixList","text":"","code":"homerToPFMatrixList(filename, n = 100L)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/homerToPFMatrixList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a HOMER motif file and create a PFMatrixList — homerToPFMatrixList","text":"filename Name input file HOMER-formatted motifs. n number observations (multiplied base frequencies create number observed bases position).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/homerToPFMatrixList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a HOMER motif file and create a PFMatrixList — homerToPFMatrixList","text":"PFMatrixList motifs file.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/homerToPFMatrixList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a HOMER motif file and create a PFMatrixList — homerToPFMatrixList","text":"","code":"library(JASPAR2020) optsL <- list(ID = c(\"MA0006.1\")) pfm1 <- TFBSTools::getMatrixSet(JASPAR2020, opts = optsL) TFBSTools::Matrix(pfm1) #> $MA0006.1 #>   [,1] [,2] [,3] [,4] [,5] [,6] #> A    3    0    0    0    0    0 #> C    8    0   23    0    0    0 #> G    2   23    0   23    0   24 #> T   11    1    1    1   24    0 #>   tmpfn <- tempfile() dumpJaspar(filename = tmpfn, pkg = \"JASPAR2020\", opts = optsL) #> [1] TRUE pfm2 <- homerToPFMatrixList(tmpfn) TFBSTools::Matrix(pfm2) #> [[1]] #>   [,1] [,2] [,3] [,4] [,5] [,6] #> A   14    4    4    4    4    4 #> C   32    4   86    4    4    4 #> G   11   86    4   86    4   89 #> T   43    7    7    7   89    4 #>   unlink(tmpfn)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/monaLisa-package.html","id":null,"dir":"Reference","previous_headings":"","what":"monaLisa - MOtif aNAlysis with Lisa. — monaLisa-package","title":"monaLisa - MOtif aNAlysis with Lisa. — monaLisa-package","text":"monaLisa collection tools simplify motif enrichment analyses genomic regions interest.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/monaLisa-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"monaLisa - MOtif aNAlysis with Lisa. — monaLisa-package","text":"makes use father Homer (http://homer.ucsd.edu/homer/index.html) algorithms search motif hits look enriched motifs sets genomic regions, compared regions. Known motifs can example obtained collection transcription factor binding site specificities, JASPAR2020.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/monaLisa-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"monaLisa - MOtif aNAlysis with Lisa. — monaLisa-package","text":"Dania Machlab, Lukas Burger, Charlotte Soneson Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifKmerSimilarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate similarities between motifs and k-mers. — motifKmerSimilarity","title":"Calculate similarities between motifs and k-mers. — motifKmerSimilarity","text":"motif, calculate similarity k-mers   length kmerLen, defined maximal probability observing   k-mer given base frequencies motif (maximum taken   possible ungapped alignments motif k-mer). necessary   matrices padded sides background base frequencies (assuming   bases frequency 0.25).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifKmerSimilarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate similarities between motifs and k-mers. — motifKmerSimilarity","text":"","code":"motifKmerSimilarity(   x,   kmerLen = 5,   kmers = NULL,   includeRevComp = FALSE,   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifKmerSimilarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate similarities between motifs and k-mers. — motifKmerSimilarity","text":"x Either PFMatrixList, character scalar file containing motifs HOMER format (used directly method = \"HOMER\", loaded PFMatrixList homerToPFMatrixList method = \"R\"). kmerLen numeric scalar giving k-mer length. kmers Either character vector k-mers calculate similarity motif, NULL, case k-mers length kmerLen used. includeRevComp logical scalar. set TRUE, k-mer well reverse complement compared motif, larger two similarities returned. BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation. verbose logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifKmerSimilarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate similarities between motifs and k-mers. — motifKmerSimilarity","text":"matrix probabilties motif - k-mer pair.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifKmerSimilarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate similarities between motifs and k-mers. — motifKmerSimilarity","text":"","code":"m <- rbind(A = c(12,  0,  0),            C = c( 3,  2,  0),            G = c( 0, 14,  0),            T = c( 0,  0, 15)) pfms <- TFBSTools::PFMatrixList(     TFBSTools::PFMatrix(name = \"m1\", profileMatrix = m),     TFBSTools::PFMatrix(name = \"m2\", profileMatrix = m[, 3:1]) ) motifKmerSimilarity(pfms, kmerLen = 3)[, c(\"AGT\", \"TGA\")] #>       AGT    TGA #> m1 0.7000 0.0625 #> m2 0.0625 0.7000"},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifSimilarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate similarities between pairs of motifs. — motifSimilarity","title":"Calculate similarities between pairs of motifs. — motifSimilarity","text":"pair motifs, calculate similarity defined   maximal Pearson's correlation coefficient base frequencies   possible shifts (relative positions two matrices least one   overlapping position). necessary matrices padded sides   background base frequencies (assuming bases frequency   0.25) enable comparison positions matrices.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifSimilarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate similarities between pairs of motifs. — motifSimilarity","text":"","code":"motifSimilarity(   x,   y = NULL,   method = c(\"R\", \"HOMER\"),   homerfile = findHomer(\"compareMotifs.pl\"),   homerOutfile = NULL,   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifSimilarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate similarities between pairs of motifs. — motifSimilarity","text":"x Either PFMatrixList, character scalar file containing motifs HOMER format (used directly method = \"HOMER\", loaded PFMatrixList homerToPFMatrixList method = \"R\"). y Either PFMatrixList NULL (default). y = NULL, similarities calucalted pairs motifs within x. Otherwise, method must \"R\" similarities calculated motif x motif y. method character scalar specifying method similarity calculations. Either \"R\" (pure R implementation) \"HOMER\" (call compareMotifs.pl script HOMER). Results identical (apart rounding errors), R implementation usually faster can parallelized (BPPARAM argument). homerfile Path HOMER script compareMotifs.pl (used method = \"HOMER\". homerOutfile character scalar giving file save similarity scores (metho = \"HOMER\"). NULL, scores stored temporary file. BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation (used method = \"R\"). verbose logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifSimilarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate similarities between pairs of motifs. — motifSimilarity","text":"matrix Pearson's correlation coefficients pair   motifs.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/motifSimilarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate similarities between pairs of motifs. — motifSimilarity","text":"","code":"m <- rbind(A = c(12,  0,  0),            C = c( 3,  2,  0),            G = c( 0, 14,  0),            T = c( 0,  0, 15)) pfms <- TFBSTools::PFMatrixList(     TFBSTools::PFMatrix(name = \"m1\", profileMatrix = m),     TFBSTools::PFMatrix(name = \"m2\", profileMatrix = m + 10),     TFBSTools::PFMatrix(name = \"m3\", profileMatrix = m[, 3:1]) ) motifSimilarity(pfms) #>           m1        m2        m3 #> m1 1.0000000 0.9997644 0.4382761 #> m2 0.9997644 1.0000000 0.4317897 #> m3 0.4382761 0.4317897 1.0000000"},{"path":"https://fmicompbio.github.io/monaLisa/reference/parseHomerOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"load output from HOMER findMotifsGenome.pl into R — parseHomerOutput","title":"load output from HOMER findMotifsGenome.pl into R — parseHomerOutput","text":"Parse HOMER output files R data structures.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/parseHomerOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load output from HOMER findMotifsGenome.pl into R — parseHomerOutput","text":"","code":"parseHomerOutput(infiles, pseudocount.log2enr = 8, p.adjust.method = \"BH\")"},{"path":"https://fmicompbio.github.io/monaLisa/reference/parseHomerOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load output from HOMER findMotifsGenome.pl into R — parseHomerOutput","text":"infiles HOMER output files parsed. pseudocount.log2enr numerical scalar pseudocount add foreground background counts calculating log2 motif enrichments p.adjust.method character scalar selecting p value adjustment method (used p.adjust).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/parseHomerOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load output from HOMER findMotifsGenome.pl into R — parseHomerOutput","text":"list nine components (negLog10P, negLog10Padj,     pearsonResid, expForegroundWgtWithHits, log2enr,     sumForegroundWgtWithHits sumBackgroundWgtWithHits),     seven containing motif (rows) bin (columns) matrix raw     -log10 P values, -log10 adjusted P values, expected number     foreground sequences hits, observed number foreground     background sequences hits,     motif enrichments Pearson residuals (pearsonResid)     log2 ratios (log2enr), two containing total foreground     background weight (totalWgtForeground,     totalWgtBackground).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/parseHomerOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load output from HOMER findMotifsGenome.pl into R — parseHomerOutput","text":"","code":"outfile <- system.file(\"extdata\", \"homer_output.txt.gz\",                        package = \"monaLisa\") res <- parseHomerOutput(infiles = c(bin1 = outfile)) head(res$negLog10P) #>                            bin1 #> MA0002.2:::RUNX1     18.8006081 #> MA0003.3:::TFAP2A     5.6458283 #> MA0004.1:::Arnt       6.9530547 #> MA0006.1:::Ahr::Arnt  5.0378160 #> MA0007.3:::Ar         0.5815203 #> MA0009.2:::T          0.5172447"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot of binned elements. — plotBinDensity","title":"Density plot of binned elements. — plotBinDensity","text":"Plot density binned elements binning information.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot of binned elements. — plotBinDensity","text":"","code":"plotBinDensity(   x,   b,   xlab = deparse(substitute(x, env = as.environment(-1))),   ylab = \"Density\",   main = \"\",   legend = \"topright\",   legend.cex = 1,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot of binned elements. — plotBinDensity","text":"x numerical vector values used binning. b factor groups elements x bins (typically output bin). xlab Label x-axis. ylab Label y-axis. main Main title. legend NULL, draw legend binning information (passed legend(x=legend) control legend position). legend.cex scalar controls text size legend relative current par(\"cex\") (see legend). ... arguments passed getColsByBin.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot of binned elements. — plotBinDensity","text":"Invisibly return value density(x) generated     plot.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plot of binned elements. — plotBinDensity","text":"","code":"set.seed(1) x <- rnorm(100) b <- bin(x, \"equalN\", nElements = 10) plotBinDensity(x, b)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics of binned sequences — plotBinDiagnostics","title":"Plot diagnostics of binned sequences — plotBinDiagnostics","text":"Plot various diagnostics binned sequences. Three plot types available: length plots distribution sequence lengths within   bin. GCfrac plots distribution GC fractions within   bin. dinucfreq plots heatmap relative frequency   dinucleotide, averaged across sequences within bin. values   centered dinucleotide better highlight differences   bins. average relative frequency dinucleotide   (across bins) indicated well.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics of binned sequences — plotBinDiagnostics","text":"","code":"plotBinDiagnostics(   seqs,   bins,   aspect = c(\"length\", \"GCfrac\", \"dinucfreq\"),   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics of binned sequences — plotBinDiagnostics","text":"seqs DNAStringSet object sequences. bins factor length order seqs, indicating bin sequence. Typically return value bin. aspect diagnostic plot. one \"length\", \"GCfrac\" \"dinucfreq\", plot distribution sequence lengths, distribution GC fractions average relative dinucleotide frequencies across bins. ... Additional argument passed getColsByBin.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diagnostics of binned sequences — plotBinDiagnostics","text":"aspect=\"length\" \"GCfrac\", returns (invisibly)   output vioplot(), generates plot.   aspect=\"dinucfreq\", returns (invisibly) ComplexHeatmap   object.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diagnostics of binned sequences — plotBinDiagnostics","text":"","code":"seqs <- Biostrings::DNAStringSet(   vapply(1:100, function(i) paste(sample(c(\"A\", \"C\", \"G\", \"T\"), 10,                                          replace = TRUE), collapse = \"\"), \"\") ) bins <- factor(rep(1:2, each = 50)) plotBinDiagnostics(seqs, bins, aspect = \"GCfrac\")  plotBinDiagnostics(seqs, bins, aspect = \"dinucfreq\")"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinHist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of binned elements. — plotBinHist","title":"Histogram of binned elements. — plotBinHist","text":"Plot histogram binned elements binning information.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinHist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of binned elements. — plotBinHist","text":"","code":"plotBinHist(   x,   b,   breaks = 10 * nlevels(b),   xlab = deparse(substitute(x, env = as.environment(-1))),   ylab = \"Frequency\",   main = \"\",   legend = \"topright\",   legend.cex = 1,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinHist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of binned elements. — plotBinHist","text":"x numerical vector values used binning. b factor groups elements x bins (typically output bin). breaks Controls histogram breaks (passed hist(...)). xlab Label x-axis. ylab Label y-axis. main Main title. legend NULL, draw legend binning information (passed legend(x=legend) control legend position). legend.cex scalar controls text size legend relative current par(\"cex\") (see legend). ... arguments passed getColsByBin.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinHist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of binned elements. — plotBinHist","text":"Invisibly return value hist(...) generated     plot.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinHist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of binned elements. — plotBinHist","text":"","code":"set.seed(1) x <- rnorm(100) b <- bin(x, \"equalN\", nElements = 10) plotBinHist(x, b)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinScatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot (xy-plot) of binned elements. — plotBinScatter","title":"Scatter plot (xy-plot) of binned elements. — plotBinScatter","text":"Plot scatter (xy-plot) binned elements binning     information.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinScatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot (xy-plot) of binned elements. — plotBinScatter","text":"","code":"plotBinScatter(   x,   y,   b,   cols = getColsByBin(b),   xlab = deparse(substitute(x, env = as.environment(-1))),   ylab = deparse(substitute(y, env = as.environment(-1))),   main = \"\",   legend = \"topright\",   legend.cex = 1,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinScatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot (xy-plot) of binned elements. — plotBinScatter","text":"x numerical vector x values. y numerical vector y values (values used binning). b factor groups elements x,y bins (typically output bin(y)). cols color vector (computed based b default using getColsByBin(b)). xlab Label x-axis. ylab Label y-axis. main Main title. legend NULL, draw legend binning information (passed legend(x=legend) control legend position). legend.cex scalar controls text size legend relative current par(\"cex\") (see legend). ... arguments passed plot(x, y, ...).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinScatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot (xy-plot) of binned elements. — plotBinScatter","text":"TRUE (invisibly).","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotBinScatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot (xy-plot) of binned elements. — plotBinScatter","text":"","code":"set.seed(1) x <- rnorm(100) y <- rnorm(100) b <- bin(y, \"equalN\", nElements = 10) plotBinScatter(x, y, b)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of motif enrichments. — plotMotifHeatmaps","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"Plot motif enrichments (e.g. significance magnitude)     heatmap.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"","code":"plotMotifHeatmaps(   x,   which.plots = c(\"negLog10P\", \"pearsonResid\", \"negLog10Padj\", \"log2enr\"),   width = 4,   col.enr = c(\"#053061\", \"#2166AC\", \"#4393C3\", \"#92C5DE\", \"#D1E5F0\", \"#F7F7F7\",     \"#FDDBC7\", \"#F4A582\", \"#D6604D\", \"#B2182B\", \"#67001F\"),   col.sig = c(\"#F0F0F0\", \"#D9D9D9\", \"#BDBDBD\", \"#969696\", \"#737373\", \"#525252\",     \"#252525\", \"#000000\"),   col.gc = c(\"#F7FCF5\", \"#E5F5E0\", \"#C7E9C0\", \"#A1D99B\", \"#74C476\", \"#41AB5D\", \"#238B45\",     \"#006D2C\", \"#00441B\"),   maxEnr = NULL,   maxSig = NULL,   highlight = NULL,   cluster = FALSE,   show_dendrogram = FALSE,   show_motif_GC = FALSE,   show_seqlogo = FALSE,   show_bin_legend = FALSE,   width.seqlogo = 1.5,   use_raster = FALSE,   na_col = \"white\",   doPlot = TRUE,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"x SummarizedExperiment numerical matrices (motifs--bins) assays(), typically return value calcBinnedMotifEnrR calcBinnedMotifEnrHomer. .plots Selects heatmaps plot (one several \"negLog10P\", \"negLog10Padj\", \"pearsonResid\" \"log2enr\"). width width (inches) individual heatmap, without legend. col.enr Colors used enrichment heatmap (\"pearsonResid\" \"log2enr\"). col.sig Colors used significance hetmaps (\"negLog10P\" \"negLog10Padj\"). col.gc Colors used motif GC content (show_motif_GC = TRUE). maxEnr Cap color mapping enrichment = maxEnr (default: 99.5th percentile). maxSig Cap color mapping -log10 P value -log10 FDR = maxSig (default: 99.5th percentile). highlight logical vector indicating motifs highlighted. cluster TRUE, order transcription factors determined hierarchical clustering \"pearsonResid\" component. Alternatively, hclust-object can supplied determine motif ordering. reordering done cluster = FALSE. show_dendrogram cluster != FALSE, controls whether show row dendrogram clustering motifs. Ignored cluster = FALSE. show_motif_GC TRUE, show column percent G+C motif part heatmap. show_seqlogo TRUE, show sequence logo next motif label. likely make sense heatmap low number motifs. show_bin_legend TRUE, show legend bin labels. FALSE (default), bin legend hidden. width.seqlogo width (inches) longest sequence logo (shorter logos drawn scale). use_raster TRUE FALSE (default). Passed use_raster Heatmap. na_col \"white\" (default). Passed na_col Heatmap. doPlot TRUE (default), plot generated heatmap(s) using Reduce(ComplexHeatmap::add_heatmap, heatmapList). FALSE, just return list heatmap(s) (heatmapList) example ), allowing modify plotting. ... arguments passed Heatmap creating main heatmaps selected .plots. example, following set font size motif names: plotMotifHeatmaps(..., row_names_gp = gpar(fontsize = 12))","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"list ComplexHeatmap::Heatmap objects.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"heatmaps created using ComplexHeatmap package     plotted side--side. heatmap width inches wide, total plot needs     graphics device width least     length(.plots) * width plus space used motif names     legend. height auto-adjusted graphics device.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"Gu, Z. Complex heatmaps reveal patterns correlations     multidimensional genomic data. Bioinformatics 2016.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotMotifHeatmaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of motif enrichments. — plotMotifHeatmaps","text":"","code":"se <- readRDS(system.file(\"extdata\",                            \"results.binned_motif_enrichment_LMRs.rds\",                            package = \"monaLisa\")) i <- which(SummarizedExperiment::assay(se, \"negLog10Padj\")[, 8] > 4) plotMotifHeatmaps(se[i, ], which.plots = \"pearsonResid\",                   width = 2, show_seqlogo = TRUE)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotSelectionProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot selection probabilities of predictors — plotSelectionProb","title":"Plot selection probabilities of predictors — plotSelectionProb","text":"function plots selection probabilities predictors   (example selected motifs), optionally multiplied either +1   -1 give sense strength directionality   associated effects. directionality estimated sign   correlation coefficient predictor response vector.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotSelectionProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot selection probabilities of predictors — plotSelectionProb","text":"","code":"plotSelectionProb(   se,   directional = TRUE,   selProbMin = metadata(se)$stabsel.params.cutoff,   selProbMinPlot = 0.4,   showSelProbMin = TRUE,   col = c(\"cadetblue\", \"grey\", \"red\"),   method = c(\"pearson\", \"kendall\", \"spearman\"),   ylimext = 0.25,   legend = \"topright\",   legend.cex = 1,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotSelectionProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot selection probabilities of predictors — plotSelectionProb","text":"se SummarizedExperiment object results stability selection (typically returned randLassoStabSel). directional logical scalar. TRUE, selection probabilities plotted sign marginal correlation predictor response. selProbMin numerical scalar [0,1]. Predictors selection probability greater selProbMin shown colored bars. color defined col[1]. default, selProbMin extracted parameters stored se. selProbMinPlot numerical scalar [0,1] less selProbMin. Predictors selection probability greater selProbMinPlot less selProbMin shown bars color col[2]. selProbMinPlot useful include additional predictors plot selected according selProbMin may close cutoff. Setting selProbMinPlot = 0 create plot including predictors. showSelProbMin logical scalar. TRUE, value selProbMin shown horizontal dashed line color col[3]. col color vector giving three colors used predictors selection probability greater selProbMin, additional predictors selection probability greater selProbMinPlot, selection probability cutoff line. method character scalar correlation method use calculation predictor-response marginal correlations. One \"pearson\", \"kendall\" \"spearman\" (see cor). ylimext numeric scalar defining much y axis limits expanded beyond plotted probabilities allow space bar labels. legend position legend bar plot (passed legend(x=legend) control legend position). legend.cex scalar controls text size legend relative current par(\"cex\") (see legend). ... additional parameters passed barplot.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotSelectionProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot selection probabilities of predictors — plotSelectionProb","text":"matrix one column, containing coordinates   bar midpoints, NULL bar plot drawn.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotSelectionProb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot selection probabilities of predictors — plotSelectionProb","text":"function creates bar plot using   barplot function.   bar corresponds predictor (motif) colors correspond   whether selected. y-axis shows selection   probabilities (directional=FALSE) selection probabilities   sign marginal correlation response   (directional=TRUE).","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotSelectionProb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot selection probabilities of predictors — plotSelectionProb","text":"","code":"## create data set Y <- rnorm(n = 500, mean = 2, sd = 1) X <- matrix(data = NA, nrow = length(Y), ncol = 50) for (i in seq_len(ncol(X))) {   X[ ,i] <- runif(n = 500, min = 0, max = 3) } s_cols <- sample(x = seq_len(ncol(X)), size = 10,    replace = FALSE) for (i in seq_along(s_cols)) {   X[ ,s_cols[i]] <- X[ ,s_cols[i]] + Y }    ## reproducible randLassoStabSel() with 1 core set.seed(123) ss <- randLassoStabSel(x = X, y = Y) plotSelectionProb(ss)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotStabilityPaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Stability Paths — plotStabilityPaths","title":"Plot Stability Paths — plotStabilityPaths","text":"Plot stability paths variable (predictor),   showing selection probability function regularization step.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotStabilityPaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Stability Paths — plotStabilityPaths","text":"","code":"plotStabilityPaths(   se,   selProbMin = metadata(se)$stabsel.params.cutoff,   col = \"cadetblue\",   lwd = 1,   lty = 1,   ylim = c(0, 1.1),   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotStabilityPaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Stability Paths — plotStabilityPaths","text":"se SummarizedExperiment object resulting stability selection, running randLassoStabSel. selProbMin numerical scalar [0,1]. Predictors selection probability greater selProbMin shown colored lines. color defined col argument. col color selected predictors. lwd line width (default = 1). lty line type (default = 1). ylim limits y-axis (default = c(0,1.1)). ... additional parameters pass matplot.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotStabilityPaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Stability Paths — plotStabilityPaths","text":"TRUE (invisibly).","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/plotStabilityPaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Stability Paths — plotStabilityPaths","text":"","code":"## create data set Y <- rnorm(n = 500, mean = 2, sd = 1) X <- matrix(data = NA, nrow = length(Y), ncol = 50) for (i in seq_len(ncol(X))) {   X[ ,i] <- runif(n = 500, min = 0, max = 3) } s_cols <- sample(x = seq_len(ncol(X)), size = 10,    replace = FALSE) for (i in seq_along(s_cols)) {   X[ ,s_cols[i]] <- X[ ,s_cols[i]] + Y }    ## reproducible randLassoStabSel() with 1 core set.seed(123) ss <- randLassoStabSel(x = X, y = Y) plotStabilityPaths(ss)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/prepareHomer.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","title":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","text":"bin, write genomic coordinates foreground     background regions files HOMER motif enrichment analysis.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/prepareHomer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","text":"","code":"prepareHomer(   gr,   b,   genomedir,   outdir,   motifFile,   homerfile = findHomer(),   regionsize = \"given\",   Ncpu = 2L,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/prepareHomer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","text":"gr GRanges object (object can coerced one) genomic regions analyze. b vector length gr groups elements bins (typically factor). genomedir Directory containing sequence files Fasta format (one per chromosome). outdir path specifying folder output files (two files per unique value b) written. motifFile file HOMER formatted PWMs used enrichment analysis. homerfile Path file name findMotifsGenome.pl HOMER script. regionsize peak size use HOMER (\"given\" keeps coordinate region, integer value keep many bases region center). Ncpu Number parallel threads HOMER can use. verbose logical scalar. TRUE, print progress messages.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/prepareHomer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","text":"path name script file run HOMER motif     enrichment analysis.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/prepareHomer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","text":"bin (unique value b) functions creates two     files outdir (outdir/bin_N_foreground.tab     outdir/bin_N_background.tab, N number     bin foreground/background correspond ranges /    within current bin). files HOMER peak file format     (see http://homer.ucsd.edu/homer/ngs/peakMotifs.html details). addition, shell script file created containing shell commands     run HOMER motif enrichment analysis.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/prepareHomer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare input files for HOMER motif enrichment analysis. — prepareHomer","text":"","code":"# prepare genome directory (here: one dummy chromosome) genomedir <- tempfile() dir.create(genomedir) writeLines(c(\">chr1\", \"ATGCATGCATCGATCGATCGATCGTACGTA\"),            file.path(genomedir, \"chr1.fa\"))  # prepare motif file, regions and bins motiffile <- tempfile() dumpJaspar(filename = motiffile, pkg = \"JASPAR2020\",            opts = list(ID = c(\"MA0006.1\"))) #> [1] TRUE gr <- GenomicRanges::GRanges(\"chr1\", IRanges::IRanges(1:4, width = 4)) b <- bin(1:4, nElements = 2)  # create dummy file (should point to local Homer installation) homerfile <- file.path(tempdir(), \"findMotifsGenome.pl\") writeLines(\"dummy\", homerfile)  # run prepareHomer outdir <- tempfile() prepareHomer(gr = gr, b = b, genomedir = genomedir,              outdir = outdir, motifFile = motiffile,              homerfile = homerfile, verbose = TRUE) #> creating foreground/background region files for HOMER #>   bin [1,2.5] #>   bin (2.5,4] #> [1] \"/var/folders/t_/mmhnh941511_hp2lwh383bp00000gn/T//RtmpEIqgrw/file29ac4819de6e/run.sh\" list.files(outdir) #> [1] \"bin_001_background.tab\" \"bin_001_foreground.tab\" \"bin_002_background.tab\" #> [4] \"bin_002_foreground.tab\" \"run.sh\"                  # clean up example unlink(c(genomedir, motiffile, homerfile, outdir))"},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomized Lasso Stability Selection — randLassoStabSel","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"function runs randomized lasso stability selection     presented Meinshausen Bühlmann (2010) improved     error bounds introduced Shah Samworth (2013). function     uses stabsel function stabs     package, implements randomized lasso version.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"","code":"randLassoStabSel(   x,   y,   weakness = 0.8,   cutoff = 0.8,   PFER = 2,   mc.cores = 1L,   ... )"},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"x predictor matrix. y response vector. weakness value 0 1 (default = 0.8). affects strict method selecting predictors. closer 0, stringent selection. weakness value 1 identical performing lasso stability selection (randomized version). cutoff value 0 1 (default = 0.8) cutoff selection probability. variable selection probability higher set cutoff selected. PFER integer (default = 2) representing absolute number false positives allow final list selected variables. details see Meinshausen Bühlmann (2010). mc.cores integer (default = 1) specifying number cores use mclapply, default way stabsel parallelization. ... additional parameters can passed stabsel.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"SummarizedExperiment object rows     observations columns predictors (dimnames     predictor matrix x).     contains: assays : x : predictor matrix.  rowData : DataFrame columns: y : response vector.  colData : DataFrame columns: selProb : final selection probabilities           predictors (last regularization step). selected : logical indicating predictors made           selection specified cutoff. selAUC : normalized area seletion curve           (mean selection probabilities regulatization steps). reg'' : columns containing selection           probabilities regularization step .  metadata : list output returned         stabsel randLassoStabSel: stabsel.params.cutoff : probability cutoff set selection           predictors (see stabsel). stabsel.params.selected : elements maximal selection           probability greater cutoff           (see stabsel). stabsel.params.max : maximum selection probabilities           (see stabsel). stabsel.params.q : average number selected variables           used (see stabsel). stabsel.params.PFER : (realized) upper bound           per-family error rate (see stabsel). stabsel.params.specifiedPFER : specified upper bound           per-family error rate (see stabsel). stabsel.params.p : number effects subject           selection (see stabsel). stabsel.params.B : number subsamples (see           stabsel). stabsel.params.sampling.type : sampling type used           stability selection (see stabsel). stabsel.params.assumption : assumptions made           selection probabilities (see stabsel). stabsel.params.call : stabsel call. randStabsel.params.weakness : weakness parameter           randomized lasso stability selection.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"Randomized lasso stability selection runs randomized lasso     regression several times subsamples response variable     predictor matrix. N/2 elements response variable randomly     chosen regression, N length vector.     corresponding section predictor matrix also chosen,     internal .glmnetRandomizedLasso function applied.     Stability selection results selection probabilities     predictor. probability specific predictor number     times selected divided total number subsamples     done (total number times regression performed). made use stabs package implements lasso stability     selection, adapted run randomized lasso stability selection.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"N. Meinshausen P. Bühlmann (2010), Stability Selection,     Journal Royal Statistical Society: Series B     (Statistical Methodology), 72, 417–73.      R.D. Shah R.J. Samworth (2013), Variable Selection Error    Control: Another Look Stability Selection,    Journal Royal Statistical Society: Series B    (Statistical Methodology), 75, 55–80.      B. Hofner, L. Boccuto, M. Göker (2015), Controlling False     Discoveries High-Dimensional Situations: Boosting Stability     Selection, BMC Bioinformatics, 16 144.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/randLassoStabSel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomized Lasso Stability Selection — randLassoStabSel","text":"","code":"## create data set Y <- rnorm(n = 500, mean = 2, sd = 1) X <- matrix(data = NA, nrow = length(Y), ncol = 50) for (i in seq_len(ncol(X))) {   X[ ,i] <- runif(n = 500, min = 0, max = 3) } s_cols <- sample(x = seq_len(ncol(X)), size = 10,   replace = FALSE) for (i in seq_along(s_cols)) {   X[ ,s_cols[i]] <- X[ ,s_cols[i]] + Y }  ## reproducible randLassoStabSel() with 1 core set.seed(123) ss <- randLassoStabSel(x = X, y = Y)  ## reproducible randLassoStabSel() in parallel mode ## (only works on non-windows machines) if (.Platform$OS.type == \"unix\") {     RNGkind(\"L'Ecuyer-CMRG\")     set.seed(123)     ss <- randLassoStabSel(x = X, y = Y, mc.preschedule = TRUE,                            mc.set.seed = TRUE, mc.cores = 2L) }"},{"path":"https://fmicompbio.github.io/monaLisa/reference/sampleRandomRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample random regions of fixed length. — sampleRandomRegions","title":"Sample random regions of fixed length. — sampleRandomRegions","text":"Sample random regions mappable parts genome     given fraction CpG islands.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/sampleRandomRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample random regions of fixed length. — sampleRandomRegions","text":"","code":"sampleRandomRegions(allowedRegions = NULL, N = 100L, regWidth = 200L)"},{"path":"https://fmicompbio.github.io/monaLisa/reference/sampleRandomRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample random regions of fixed length. — sampleRandomRegions","text":"allowedRegions unstranded GRanges object \"allowed\" genome, usually mappable regions. N Number regions sample. regWidth Region width.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/sampleRandomRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample random regions of fixed length. — sampleRandomRegions","text":"GRanges object randomly sampled mappable regions width     regWidth fractionCGI coming CpG islands.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/sampleRandomRegions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample random regions of fixed length. — sampleRandomRegions","text":"order make results deterministic, set random     number seed calling sampleRandomRegions using     set.seed.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/sampleRandomRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample random regions of fixed length. — sampleRandomRegions","text":"","code":"regs <- GenomicRanges::GRanges(   seqnames = rep(c(\"chr1\", \"chr2\"), each = 2),    ranges = IRanges::IRanges(start = 1:4, end = 5:8)) set.seed(123) sampleRandomRegions(regs, N = 2, regWidth = 3L) #> GRanges object with 2 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1       3-5      * #>   [2]     chr2       4-6      * #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"https://fmicompbio.github.io/monaLisa/reference/seqLogoGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simple sequence logo grob. — seqLogoGrob","title":"Create a simple sequence logo grob. — seqLogoGrob","text":"Create simple sequence logo grob (grid-graphics object)     transcription factor position frequency matrix. logo drawing     code simplified version seqLogo     example can used embedd sequence logos within plots.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/seqLogoGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simple sequence logo grob. — seqLogoGrob","text":"","code":"seqLogoGrob(x, xmax = NULL, ymax = 2, xjust = c(\"left\", \"center\", \"right\"))"},{"path":"https://fmicompbio.github.io/monaLisa/reference/seqLogoGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simple sequence logo grob. — seqLogoGrob","text":"x PFMatrix object xmax numeric scalar maximal width logo (base-pairs). value NULL scale logo full width viewport. ymax numeric scalar maximal height logo (bits) value NULL scale logo full height viewport. xjust character scalar specifying horizontal adjustment sequence log withint viewport; one \"left\", \"center\" \"right\".","code":""},{"path":"https://fmicompbio.github.io/monaLisa/reference/seqLogoGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simple sequence logo grob. — seqLogoGrob","text":"polygon grob.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/monaLisa/reference/seqLogoGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simple sequence logo grob. — seqLogoGrob","text":"","code":"if (require(JASPAR2020) && require(TFBSTools) && require(gridExtra)) {     pfm1 <- getMatrixByID(JASPAR2020, \"MA0139\")     pfm2 <- getMatrixByID(JASPAR2020, \"MA0531\")      g1 <- seqLogoGrob(pfm1)     g2 <- seqLogoGrob(pfm2)      gridExtra::grid.arrange(g1, g2) }"},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-1113","dir":"Changelog","previous_headings":"","what":"monaLisa 1.11.3","title":"monaLisa 1.11.3","text":"add show_bin_legend argument plotMotifHeatmaps (contributed @danymukesha, PR #62)","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-191","dir":"Changelog","previous_headings":"","what":"monaLisa 1.9.1","title":"monaLisa 1.9.1","text":"adapt dumpJaspar also work JASPAR2024","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-171","dir":"Changelog","previous_headings":"","what":"monaLisa 1.7.1","title":"monaLisa 1.7.1","text":"allow modification heatmap graphical parameters forwarding ... argument plotMotifHeatmaps calls ComplexHeatmap::Heatmap","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-131","dir":"Changelog","previous_headings":"","what":"monaLisa 1.3.1","title":"monaLisa 1.3.1","text":"update citation information","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-112","dir":"Changelog","previous_headings":"","what":"monaLisa 1.1.2","title":"monaLisa 1.1.2","text":"added citation Bioinformatics publication","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-111","dir":"Changelog","previous_headings":"","what":"monaLisa 1.1.1","title":"monaLisa 1.1.1","text":"added link pre-print manuscript biorXiv README.md added warning bin(..., minAbsX = val) adjusted zero-bin breaks deviate 20% val added doPlot argument plotMotifHeatmaps select heatmaps plotted just generated returned added LICENSE.md file expanded monaLisa.Rmd vignette illustration binary single set motif enrichment analysis expanded collineairty regression selecting_motifs_with_randLassoStabSel.Rmd vignette choice parameter values stability selection. updated results.binned_6mer_enrichment_LMRs.rds results.binned_motif_enrichment_LMRs.rds files stored monaLisa current version package.","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-100","dir":"Changelog","previous_headings":"","what":"monaLisa 1.0.0","title":"monaLisa 1.0.0","text":"Initial release monaLisa part Bioconductor 3.14","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-0995","dir":"Changelog","previous_headings":"","what":"monaLisa 0.99.5","title":"monaLisa 0.99.5","text":"Updated R/monaLisa-package.R file","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-0994","dir":"Changelog","previous_headings":"","what":"monaLisa 0.99.4","title":"monaLisa 0.99.4","text":"Suppressed warnings matchPWM (due presence Ns) regression vignette","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-0993","dir":"Changelog","previous_headings":"","what":"monaLisa 0.99.3","title":"monaLisa 0.99.3","text":"Updated README.md file","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-0992","dir":"Changelog","previous_headings":"","what":"monaLisa 0.99.2","title":"monaLisa 0.99.2","text":"Added fixes regression vignette Addressed failing test calcBinnedKmerEnr","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-0991","dir":"Changelog","previous_headings":"","what":"monaLisa 0.99.1","title":"monaLisa 0.99.1","text":"Added examples missing exported functions Harmonized function naming (anno_seqlogo -> annoSeqlogo, sample_random_regions -> sampleRandomRegions) Clarified details Pearson residual calculation Adapted documentation new version BiocParallel Harmonized return values plot functions Added legend position size arguments plotSelectionProb()","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-0990","dir":"Changelog","previous_headings":"","what":"monaLisa 0.99.0","title":"monaLisa 0.99.0","text":"Preparation Bioconductor submission","code":""},{"path":"https://fmicompbio.github.io/monaLisa/news/index.html","id":"monalisa-020","dir":"Changelog","previous_headings":"","what":"monaLisa 0.2.0","title":"monaLisa 0.2.0","text":"Added NEWS.md file track changes package.","code":""}]
